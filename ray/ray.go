// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Tue, 05 Nov 2019 17:44:23 CST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package ray

/*
#include "raylib.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// InitWindow function as declared in ray/raylib.h:861
func InitWindow(width int32, height int32, title string) {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	title = safeString(title)
	ctitle, _ := unpackPCharString(title)
	C.InitWindow(cwidth, cheight, ctitle)
	runtime.KeepAlive(title)
}

// WindowShouldClose function as declared in ray/raylib.h:862
func WindowShouldClose() bool {
	__ret := C.WindowShouldClose()
	__v := (bool)(__ret)
	return __v
}

// CloseWindow function as declared in ray/raylib.h:863
func CloseWindow() {
	C.CloseWindow()
}

// IsWindowReady function as declared in ray/raylib.h:864
func IsWindowReady() bool {
	__ret := C.IsWindowReady()
	__v := (bool)(__ret)
	return __v
}

// IsWindowMinimized function as declared in ray/raylib.h:865
func IsWindowMinimized() bool {
	__ret := C.IsWindowMinimized()
	__v := (bool)(__ret)
	return __v
}

// IsWindowResized function as declared in ray/raylib.h:866
func IsWindowResized() bool {
	__ret := C.IsWindowResized()
	__v := (bool)(__ret)
	return __v
}

// IsWindowHidden function as declared in ray/raylib.h:867
func IsWindowHidden() bool {
	__ret := C.IsWindowHidden()
	__v := (bool)(__ret)
	return __v
}

// ToggleFullscreen function as declared in ray/raylib.h:868
func ToggleFullscreen() {
	C.ToggleFullscreen()
}

// UnhideWindow function as declared in ray/raylib.h:869
func UnhideWindow() {
	C.UnhideWindow()
}

// HideWindow function as declared in ray/raylib.h:870
func HideWindow() {
	C.HideWindow()
}

// SetWindowIcon function as declared in ray/raylib.h:871
func SetWindowIcon(image Image) {
	cimage, _ := image.PassValue()
	C.SetWindowIcon(cimage)
}

// SetWindowTitle function as declared in ray/raylib.h:872
func SetWindowTitle(title string) {
	title = safeString(title)
	ctitle, _ := unpackPCharString(title)
	C.SetWindowTitle(ctitle)
	runtime.KeepAlive(title)
}

// SetWindowPosition function as declared in ray/raylib.h:873
func SetWindowPosition(x int32, y int32) {
	cx, _ := (C.int)(x), cgoAllocsUnknown
	cy, _ := (C.int)(y), cgoAllocsUnknown
	C.SetWindowPosition(cx, cy)
}

// SetWindowMonitor function as declared in ray/raylib.h:874
func SetWindowMonitor(monitor int32) {
	cmonitor, _ := (C.int)(monitor), cgoAllocsUnknown
	C.SetWindowMonitor(cmonitor)
}

// SetWindowMinSize function as declared in ray/raylib.h:875
func SetWindowMinSize(width int32, height int32) {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	C.SetWindowMinSize(cwidth, cheight)
}

// SetWindowSize function as declared in ray/raylib.h:876
func SetWindowSize(width int32, height int32) {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	C.SetWindowSize(cwidth, cheight)
}

// GetWindowHandle function as declared in ray/raylib.h:877
func GetWindowHandle() unsafe.Pointer {
	__ret := C.GetWindowHandle()
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// GetScreenWidth function as declared in ray/raylib.h:878
func GetScreenWidth() int32 {
	__ret := C.GetScreenWidth()
	__v := (int32)(__ret)
	return __v
}

// GetScreenHeight function as declared in ray/raylib.h:879
func GetScreenHeight() int32 {
	__ret := C.GetScreenHeight()
	__v := (int32)(__ret)
	return __v
}

// GetMonitorCount function as declared in ray/raylib.h:880
func GetMonitorCount() int32 {
	__ret := C.GetMonitorCount()
	__v := (int32)(__ret)
	return __v
}

// GetMonitorWidth function as declared in ray/raylib.h:881
func GetMonitorWidth(monitor int32) int32 {
	cmonitor, _ := (C.int)(monitor), cgoAllocsUnknown
	__ret := C.GetMonitorWidth(cmonitor)
	__v := (int32)(__ret)
	return __v
}

// GetMonitorHeight function as declared in ray/raylib.h:882
func GetMonitorHeight(monitor int32) int32 {
	cmonitor, _ := (C.int)(monitor), cgoAllocsUnknown
	__ret := C.GetMonitorHeight(cmonitor)
	__v := (int32)(__ret)
	return __v
}

// GetMonitorPhysicalWidth function as declared in ray/raylib.h:883
func GetMonitorPhysicalWidth(monitor int32) int32 {
	cmonitor, _ := (C.int)(monitor), cgoAllocsUnknown
	__ret := C.GetMonitorPhysicalWidth(cmonitor)
	__v := (int32)(__ret)
	return __v
}

// GetMonitorPhysicalHeight function as declared in ray/raylib.h:884
func GetMonitorPhysicalHeight(monitor int32) int32 {
	cmonitor, _ := (C.int)(monitor), cgoAllocsUnknown
	__ret := C.GetMonitorPhysicalHeight(cmonitor)
	__v := (int32)(__ret)
	return __v
}

// GetWindowPosition function as declared in ray/raylib.h:885
func GetWindowPosition() Vector2 {
	__ret := C.GetWindowPosition()
	__v := *NewVector2Ref(unsafe.Pointer(&__ret))
	return __v
}

// GetMonitorName function as declared in ray/raylib.h:886
func GetMonitorName(monitor int32) string {
	cmonitor, _ := (C.int)(monitor), cgoAllocsUnknown
	__ret := C.GetMonitorName(cmonitor)
	__v := packPCharString(__ret)
	return __v
}

// GetClipboardText function as declared in ray/raylib.h:887
func GetClipboardText() string {
	__ret := C.GetClipboardText()
	__v := packPCharString(__ret)
	return __v
}

// SetClipboardText function as declared in ray/raylib.h:888
func SetClipboardText(text string) {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	C.SetClipboardText(ctext)
	runtime.KeepAlive(text)
}

// ShowCursor function as declared in ray/raylib.h:891
func ShowCursor() {
	C.ShowCursor()
}

// HideCursor function as declared in ray/raylib.h:892
func HideCursor() {
	C.HideCursor()
}

// IsCursorHidden function as declared in ray/raylib.h:893
func IsCursorHidden() bool {
	__ret := C.IsCursorHidden()
	__v := (bool)(__ret)
	return __v
}

// EnableCursor function as declared in ray/raylib.h:894
func EnableCursor() {
	C.EnableCursor()
}

// DisableCursor function as declared in ray/raylib.h:895
func DisableCursor() {
	C.DisableCursor()
}

// ClearBackground function as declared in ray/raylib.h:898
func ClearBackground(color Color) {
	ccolor, _ := color.PassValue()
	C.ClearBackground(ccolor)
}

// BeginDrawing function as declared in ray/raylib.h:899
func BeginDrawing() {
	C.BeginDrawing()
}

// EndDrawing function as declared in ray/raylib.h:900
func EndDrawing() {
	C.EndDrawing()
}

// BeginMode2D function as declared in ray/raylib.h:901
func BeginMode2D(camera Camera2D) {
	ccamera, _ := camera.PassValue()
	C.BeginMode2D(ccamera)
}

// EndMode2D function as declared in ray/raylib.h:902
func EndMode2D() {
	C.EndMode2D()
}

// BeginMode3D function as declared in ray/raylib.h:903
func BeginMode3D(camera Camera3D) {
	ccamera, _ := camera.PassValue()
	C.BeginMode3D(ccamera)
}

// EndMode3D function as declared in ray/raylib.h:904
func EndMode3D() {
	C.EndMode3D()
}

// BeginTextureMode function as declared in ray/raylib.h:905
func BeginTextureMode(target RenderTexture2D) {
	ctarget, _ := target.PassValue()
	C.BeginTextureMode(ctarget)
}

// EndTextureMode function as declared in ray/raylib.h:906
func EndTextureMode() {
	C.EndTextureMode()
}

// BeginScissorMode function as declared in ray/raylib.h:907
func BeginScissorMode(x int32, y int32, width int32, height int32) {
	cx, _ := (C.int)(x), cgoAllocsUnknown
	cy, _ := (C.int)(y), cgoAllocsUnknown
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	C.BeginScissorMode(cx, cy, cwidth, cheight)
}

// EndScissorMode function as declared in ray/raylib.h:908
func EndScissorMode() {
	C.EndScissorMode()
}

// GetMouseRay function as declared in ray/raylib.h:911
func GetMouseRay(mousePosition Vector2, camera Camera) Ray {
	cmousePosition, _ := mousePosition.PassValue()
	ccamera, _ := camera.PassValue()
	__ret := C.GetMouseRay(cmousePosition, ccamera)
	__v := *NewRayRef(unsafe.Pointer(&__ret))
	return __v
}

// GetCameraMatrix function as declared in ray/raylib.h:912
func GetCameraMatrix(camera Camera) Matrix {
	ccamera, _ := camera.PassValue()
	__ret := C.GetCameraMatrix(ccamera)
	__v := *NewMatrixRef(unsafe.Pointer(&__ret))
	return __v
}

// GetCameraMatrix2D function as declared in ray/raylib.h:913
func GetCameraMatrix2D(camera Camera2D) Matrix {
	ccamera, _ := camera.PassValue()
	__ret := C.GetCameraMatrix2D(ccamera)
	__v := *NewMatrixRef(unsafe.Pointer(&__ret))
	return __v
}

// GetWorldToScreen function as declared in ray/raylib.h:914
func GetWorldToScreen(position Vector3, camera Camera) Vector2 {
	cposition, _ := position.PassValue()
	ccamera, _ := camera.PassValue()
	__ret := C.GetWorldToScreen(cposition, ccamera)
	__v := *NewVector2Ref(unsafe.Pointer(&__ret))
	return __v
}

// GetWorldToScreen2D function as declared in ray/raylib.h:915
func GetWorldToScreen2D(position Vector2, camera Camera2D) Vector2 {
	cposition, _ := position.PassValue()
	ccamera, _ := camera.PassValue()
	__ret := C.GetWorldToScreen2D(cposition, ccamera)
	__v := *NewVector2Ref(unsafe.Pointer(&__ret))
	return __v
}

// GetScreenToWorld2D function as declared in ray/raylib.h:916
func GetScreenToWorld2D(position Vector2, camera Camera2D) Vector2 {
	cposition, _ := position.PassValue()
	ccamera, _ := camera.PassValue()
	__ret := C.GetScreenToWorld2D(cposition, ccamera)
	__v := *NewVector2Ref(unsafe.Pointer(&__ret))
	return __v
}

// SetTargetFPS function as declared in ray/raylib.h:919
func SetTargetFPS(fps int32) {
	cfps, _ := (C.int)(fps), cgoAllocsUnknown
	C.SetTargetFPS(cfps)
}

// GetFPS function as declared in ray/raylib.h:920
func GetFPS() int32 {
	__ret := C.GetFPS()
	__v := (int32)(__ret)
	return __v
}

// GetFrameTime function as declared in ray/raylib.h:921
func GetFrameTime() float32 {
	__ret := C.GetFrameTime()
	__v := (float32)(__ret)
	return __v
}

// GetTime function as declared in ray/raylib.h:922
func GetTime() float64 {
	__ret := C.GetTime()
	__v := (float64)(__ret)
	return __v
}

// ColorToInt function as declared in ray/raylib.h:925
func ColorToInt(color Color) int32 {
	ccolor, _ := color.PassValue()
	__ret := C.ColorToInt(ccolor)
	__v := (int32)(__ret)
	return __v
}

// ColorNormalize function as declared in ray/raylib.h:926
func ColorNormalize(color Color) Vector4 {
	ccolor, _ := color.PassValue()
	__ret := C.ColorNormalize(ccolor)
	__v := *NewVector4Ref(unsafe.Pointer(&__ret))
	return __v
}

// ColorToHSV function as declared in ray/raylib.h:927
func ColorToHSV(color Color) Vector3 {
	ccolor, _ := color.PassValue()
	__ret := C.ColorToHSV(ccolor)
	__v := *NewVector3Ref(unsafe.Pointer(&__ret))
	return __v
}

// ColorFromHSV function as declared in ray/raylib.h:928
func ColorFromHSV(hsv Vector3) Color {
	chsv, _ := hsv.PassValue()
	__ret := C.ColorFromHSV(chsv)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// GetColor function as declared in ray/raylib.h:929
func GetColor(hexValue int32) Color {
	chexValue, _ := (C.int)(hexValue), cgoAllocsUnknown
	__ret := C.GetColor(chexValue)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// Fade function as declared in ray/raylib.h:930
func Fade(color Color, alpha float32) Color {
	ccolor, _ := color.PassValue()
	calpha, _ := (C.float)(alpha), cgoAllocsUnknown
	__ret := C.Fade(ccolor, calpha)
	__v := *NewColorRef(unsafe.Pointer(&__ret))
	return __v
}

// SetConfigFlags function as declared in ray/raylib.h:933
func SetConfigFlags(flags uint32) {
	cflags, _ := (C.uint)(flags), cgoAllocsUnknown
	C.SetConfigFlags(cflags)
}

// SetTraceLogLevel function as declared in ray/raylib.h:934
func SetTraceLogLevel(logType int32) {
	clogType, _ := (C.int)(logType), cgoAllocsUnknown
	C.SetTraceLogLevel(clogType)
}

// SetTraceLogExit function as declared in ray/raylib.h:935
func SetTraceLogExit(logType int32) {
	clogType, _ := (C.int)(logType), cgoAllocsUnknown
	C.SetTraceLogExit(clogType)
}

// TakeScreenshot function as declared in ray/raylib.h:938
func TakeScreenshot(fileName string) {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	C.TakeScreenshot(cfileName)
	runtime.KeepAlive(fileName)
}

// GetRandomValue function as declared in ray/raylib.h:939
func GetRandomValue(min int32, max int32) int32 {
	cmin, _ := (C.int)(min), cgoAllocsUnknown
	cmax, _ := (C.int)(max), cgoAllocsUnknown
	__ret := C.GetRandomValue(cmin, cmax)
	__v := (int32)(__ret)
	return __v
}

// FileExists function as declared in ray/raylib.h:942
func FileExists(fileName string) bool {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.FileExists(cfileName)
	runtime.KeepAlive(fileName)
	__v := (bool)(__ret)
	return __v
}

// IsFileExtension function as declared in ray/raylib.h:943
func IsFileExtension(fileName string, ext string) bool {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	ext = safeString(ext)
	cext, _ := unpackPCharString(ext)
	__ret := C.IsFileExtension(cfileName, cext)
	runtime.KeepAlive(ext)
	runtime.KeepAlive(fileName)
	__v := (bool)(__ret)
	return __v
}

// DirectoryExists function as declared in ray/raylib.h:944
func DirectoryExists(dirPath string) bool {
	dirPath = safeString(dirPath)
	cdirPath, _ := unpackPCharString(dirPath)
	__ret := C.DirectoryExists(cdirPath)
	runtime.KeepAlive(dirPath)
	__v := (bool)(__ret)
	return __v
}

// GetExtension function as declared in ray/raylib.h:945
func GetExtension(fileName string) string {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.GetExtension(cfileName)
	runtime.KeepAlive(fileName)
	__v := packPCharString(__ret)
	return __v
}

// GetFileName function as declared in ray/raylib.h:946
func GetFileName(filePath string) string {
	filePath = safeString(filePath)
	cfilePath, _ := unpackPCharString(filePath)
	__ret := C.GetFileName(cfilePath)
	runtime.KeepAlive(filePath)
	__v := packPCharString(__ret)
	return __v
}

// GetFileNameWithoutExt function as declared in ray/raylib.h:947
func GetFileNameWithoutExt(filePath string) string {
	filePath = safeString(filePath)
	cfilePath, _ := unpackPCharString(filePath)
	__ret := C.GetFileNameWithoutExt(cfilePath)
	runtime.KeepAlive(filePath)
	__v := packPCharString(__ret)
	return __v
}

// GetDirectoryPath function as declared in ray/raylib.h:948
func GetDirectoryPath(filePath string) string {
	filePath = safeString(filePath)
	cfilePath, _ := unpackPCharString(filePath)
	__ret := C.GetDirectoryPath(cfilePath)
	runtime.KeepAlive(filePath)
	__v := packPCharString(__ret)
	return __v
}

// GetPrevDirectoryPath function as declared in ray/raylib.h:949
func GetPrevDirectoryPath(dirPath string) string {
	dirPath = safeString(dirPath)
	cdirPath, _ := unpackPCharString(dirPath)
	__ret := C.GetPrevDirectoryPath(cdirPath)
	runtime.KeepAlive(dirPath)
	__v := packPCharString(__ret)
	return __v
}

// GetWorkingDirectory function as declared in ray/raylib.h:950
func GetWorkingDirectory() string {
	__ret := C.GetWorkingDirectory()
	__v := packPCharString(__ret)
	return __v
}

// GetDirectoryFiles function as declared in ray/raylib.h:951
func GetDirectoryFiles(dirPath string, count []int32) [][]byte {
	dirPath = safeString(dirPath)
	cdirPath, _ := unpackPCharString(dirPath)
	ccount, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&count)).Data)), cgoAllocsUnknown
	__ret := C.GetDirectoryFiles(cdirPath, ccount)
	runtime.KeepAlive(dirPath)
	var __v [][]byte
	packSSByte(__v, __ret)
	return __v
}

// ClearDirectoryFiles function as declared in ray/raylib.h:952
func ClearDirectoryFiles() {
	C.ClearDirectoryFiles()
}

// ChangeDirectory function as declared in ray/raylib.h:953
func ChangeDirectory(dir string) bool {
	dir = safeString(dir)
	cdir, _ := unpackPCharString(dir)
	__ret := C.ChangeDirectory(cdir)
	runtime.KeepAlive(dir)
	__v := (bool)(__ret)
	return __v
}

// IsFileDropped function as declared in ray/raylib.h:954
func IsFileDropped() bool {
	__ret := C.IsFileDropped()
	__v := (bool)(__ret)
	return __v
}

// GetDroppedFiles function as declared in ray/raylib.h:955
func GetDroppedFiles(count []int32) [][]byte {
	ccount, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&count)).Data)), cgoAllocsUnknown
	__ret := C.GetDroppedFiles(ccount)
	var __v [][]byte
	packSSByte(__v, __ret)
	return __v
}

// ClearDroppedFiles function as declared in ray/raylib.h:956
func ClearDroppedFiles() {
	C.ClearDroppedFiles()
}

// GetFileModTime function as declared in ray/raylib.h:957
func GetFileModTime(fileName string) int {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.GetFileModTime(cfileName)
	runtime.KeepAlive(fileName)
	__v := (int)(__ret)
	return __v
}

// CompressData function as declared in ray/raylib.h:959
func CompressData(data []byte, dataLength int32, compDataLength []int32) []byte {
	cdata, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&data)).Data)), cgoAllocsUnknown
	cdataLength, _ := (C.int)(dataLength), cgoAllocsUnknown
	ccompDataLength, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&compDataLength)).Data)), cgoAllocsUnknown
	__ret := C.CompressData(cdata, cdataLength, ccompDataLength)
	__v := (*(*[0x7fffffff]byte)(unsafe.Pointer(__ret)))[:0]
	return __v
}

// DecompressData function as declared in ray/raylib.h:960
func DecompressData(compData []byte, compDataLength int32, dataLength []int32) []byte {
	ccompData, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&compData)).Data)), cgoAllocsUnknown
	ccompDataLength, _ := (C.int)(compDataLength), cgoAllocsUnknown
	cdataLength, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dataLength)).Data)), cgoAllocsUnknown
	__ret := C.DecompressData(ccompData, ccompDataLength, cdataLength)
	__v := (*(*[0x7fffffff]byte)(unsafe.Pointer(__ret)))[:0]
	return __v
}

// StorageSaveValue function as declared in ray/raylib.h:963
func StorageSaveValue(position int32, value int32) {
	cposition, _ := (C.int)(position), cgoAllocsUnknown
	cvalue, _ := (C.int)(value), cgoAllocsUnknown
	C.StorageSaveValue(cposition, cvalue)
}

// StorageLoadValue function as declared in ray/raylib.h:964
func StorageLoadValue(position int32) int32 {
	cposition, _ := (C.int)(position), cgoAllocsUnknown
	__ret := C.StorageLoadValue(cposition)
	__v := (int32)(__ret)
	return __v
}

// OpenURL function as declared in ray/raylib.h:966
func OpenURL(url string) {
	url = safeString(url)
	curl, _ := unpackPCharString(url)
	C.OpenURL(curl)
	runtime.KeepAlive(url)
}

// IsKeyPressed function as declared in ray/raylib.h:973
func IsKeyPressed(key int32) bool {
	ckey, _ := (C.int)(key), cgoAllocsUnknown
	__ret := C.IsKeyPressed(ckey)
	__v := (bool)(__ret)
	return __v
}

// IsKeyDown function as declared in ray/raylib.h:974
func IsKeyDown(key int32) bool {
	ckey, _ := (C.int)(key), cgoAllocsUnknown
	__ret := C.IsKeyDown(ckey)
	__v := (bool)(__ret)
	return __v
}

// IsKeyReleased function as declared in ray/raylib.h:975
func IsKeyReleased(key int32) bool {
	ckey, _ := (C.int)(key), cgoAllocsUnknown
	__ret := C.IsKeyReleased(ckey)
	__v := (bool)(__ret)
	return __v
}

// IsKeyUp function as declared in ray/raylib.h:976
func IsKeyUp(key int32) bool {
	ckey, _ := (C.int)(key), cgoAllocsUnknown
	__ret := C.IsKeyUp(ckey)
	__v := (bool)(__ret)
	return __v
}

// GetKeyPressed function as declared in ray/raylib.h:977
func GetKeyPressed() int32 {
	__ret := C.GetKeyPressed()
	__v := (int32)(__ret)
	return __v
}

// SetExitKey function as declared in ray/raylib.h:978
func SetExitKey(key int32) {
	ckey, _ := (C.int)(key), cgoAllocsUnknown
	C.SetExitKey(ckey)
}

// IsGamepadAvailable function as declared in ray/raylib.h:981
func IsGamepadAvailable(gamepad int32) bool {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	__ret := C.IsGamepadAvailable(cgamepad)
	__v := (bool)(__ret)
	return __v
}

// IsGamepadName function as declared in ray/raylib.h:982
func IsGamepadName(gamepad int32, name string) bool {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	name = safeString(name)
	cname, _ := unpackPCharString(name)
	__ret := C.IsGamepadName(cgamepad, cname)
	runtime.KeepAlive(name)
	__v := (bool)(__ret)
	return __v
}

// GetGamepadName function as declared in ray/raylib.h:983
func GetGamepadName(gamepad int32) string {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	__ret := C.GetGamepadName(cgamepad)
	__v := packPCharString(__ret)
	return __v
}

// IsGamepadButtonPressed function as declared in ray/raylib.h:984
func IsGamepadButtonPressed(gamepad int32, button int32) bool {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	cbutton, _ := (C.int)(button), cgoAllocsUnknown
	__ret := C.IsGamepadButtonPressed(cgamepad, cbutton)
	__v := (bool)(__ret)
	return __v
}

// IsGamepadButtonDown function as declared in ray/raylib.h:985
func IsGamepadButtonDown(gamepad int32, button int32) bool {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	cbutton, _ := (C.int)(button), cgoAllocsUnknown
	__ret := C.IsGamepadButtonDown(cgamepad, cbutton)
	__v := (bool)(__ret)
	return __v
}

// IsGamepadButtonReleased function as declared in ray/raylib.h:986
func IsGamepadButtonReleased(gamepad int32, button int32) bool {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	cbutton, _ := (C.int)(button), cgoAllocsUnknown
	__ret := C.IsGamepadButtonReleased(cgamepad, cbutton)
	__v := (bool)(__ret)
	return __v
}

// IsGamepadButtonUp function as declared in ray/raylib.h:987
func IsGamepadButtonUp(gamepad int32, button int32) bool {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	cbutton, _ := (C.int)(button), cgoAllocsUnknown
	__ret := C.IsGamepadButtonUp(cgamepad, cbutton)
	__v := (bool)(__ret)
	return __v
}

// GetGamepadButtonPressed function as declared in ray/raylib.h:988
func GetGamepadButtonPressed() int32 {
	__ret := C.GetGamepadButtonPressed()
	__v := (int32)(__ret)
	return __v
}

// GetGamepadAxisCount function as declared in ray/raylib.h:989
func GetGamepadAxisCount(gamepad int32) int32 {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	__ret := C.GetGamepadAxisCount(cgamepad)
	__v := (int32)(__ret)
	return __v
}

// GetGamepadAxisMovement function as declared in ray/raylib.h:990
func GetGamepadAxisMovement(gamepad int32, axis int32) float32 {
	cgamepad, _ := (C.int)(gamepad), cgoAllocsUnknown
	caxis, _ := (C.int)(axis), cgoAllocsUnknown
	__ret := C.GetGamepadAxisMovement(cgamepad, caxis)
	__v := (float32)(__ret)
	return __v
}

// IsMouseButtonPressed function as declared in ray/raylib.h:993
func IsMouseButtonPressed(button int32) bool {
	cbutton, _ := (C.int)(button), cgoAllocsUnknown
	__ret := C.IsMouseButtonPressed(cbutton)
	__v := (bool)(__ret)
	return __v
}

// IsMouseButtonDown function as declared in ray/raylib.h:994
func IsMouseButtonDown(button int32) bool {
	cbutton, _ := (C.int)(button), cgoAllocsUnknown
	__ret := C.IsMouseButtonDown(cbutton)
	__v := (bool)(__ret)
	return __v
}

// IsMouseButtonReleased function as declared in ray/raylib.h:995
func IsMouseButtonReleased(button int32) bool {
	cbutton, _ := (C.int)(button), cgoAllocsUnknown
	__ret := C.IsMouseButtonReleased(cbutton)
	__v := (bool)(__ret)
	return __v
}

// IsMouseButtonUp function as declared in ray/raylib.h:996
func IsMouseButtonUp(button int32) bool {
	cbutton, _ := (C.int)(button), cgoAllocsUnknown
	__ret := C.IsMouseButtonUp(cbutton)
	__v := (bool)(__ret)
	return __v
}

// GetMouseX function as declared in ray/raylib.h:997
func GetMouseX() int32 {
	__ret := C.GetMouseX()
	__v := (int32)(__ret)
	return __v
}

// GetMouseY function as declared in ray/raylib.h:998
func GetMouseY() int32 {
	__ret := C.GetMouseY()
	__v := (int32)(__ret)
	return __v
}

// GetMousePosition function as declared in ray/raylib.h:999
func GetMousePosition() Vector2 {
	__ret := C.GetMousePosition()
	__v := *NewVector2Ref(unsafe.Pointer(&__ret))
	return __v
}

// SetMousePosition function as declared in ray/raylib.h:1000
func SetMousePosition(x int32, y int32) {
	cx, _ := (C.int)(x), cgoAllocsUnknown
	cy, _ := (C.int)(y), cgoAllocsUnknown
	C.SetMousePosition(cx, cy)
}

// SetMouseOffset function as declared in ray/raylib.h:1001
func SetMouseOffset(offsetX int32, offsetY int32) {
	coffsetX, _ := (C.int)(offsetX), cgoAllocsUnknown
	coffsetY, _ := (C.int)(offsetY), cgoAllocsUnknown
	C.SetMouseOffset(coffsetX, coffsetY)
}

// SetMouseScale function as declared in ray/raylib.h:1002
func SetMouseScale(scaleX float32, scaleY float32) {
	cscaleX, _ := (C.float)(scaleX), cgoAllocsUnknown
	cscaleY, _ := (C.float)(scaleY), cgoAllocsUnknown
	C.SetMouseScale(cscaleX, cscaleY)
}

// GetMouseWheelMove function as declared in ray/raylib.h:1003
func GetMouseWheelMove() int32 {
	__ret := C.GetMouseWheelMove()
	__v := (int32)(__ret)
	return __v
}

// GetTouchX function as declared in ray/raylib.h:1006
func GetTouchX() int32 {
	__ret := C.GetTouchX()
	__v := (int32)(__ret)
	return __v
}

// GetTouchY function as declared in ray/raylib.h:1007
func GetTouchY() int32 {
	__ret := C.GetTouchY()
	__v := (int32)(__ret)
	return __v
}

// GetTouchPosition function as declared in ray/raylib.h:1008
func GetTouchPosition(index int32) Vector2 {
	cindex, _ := (C.int)(index), cgoAllocsUnknown
	__ret := C.GetTouchPosition(cindex)
	__v := *NewVector2Ref(unsafe.Pointer(&__ret))
	return __v
}

// SetGesturesEnabled function as declared in ray/raylib.h:1013
func SetGesturesEnabled(gestureFlags uint32) {
	cgestureFlags, _ := (C.uint)(gestureFlags), cgoAllocsUnknown
	C.SetGesturesEnabled(cgestureFlags)
}

// IsGestureDetected function as declared in ray/raylib.h:1014
func IsGestureDetected(gesture int32) bool {
	cgesture, _ := (C.int)(gesture), cgoAllocsUnknown
	__ret := C.IsGestureDetected(cgesture)
	__v := (bool)(__ret)
	return __v
}

// GetGestureDetected function as declared in ray/raylib.h:1015
func GetGestureDetected() int32 {
	__ret := C.GetGestureDetected()
	__v := (int32)(__ret)
	return __v
}

// GetTouchPointsCount function as declared in ray/raylib.h:1016
func GetTouchPointsCount() int32 {
	__ret := C.GetTouchPointsCount()
	__v := (int32)(__ret)
	return __v
}

// GetGestureHoldDuration function as declared in ray/raylib.h:1017
func GetGestureHoldDuration() float32 {
	__ret := C.GetGestureHoldDuration()
	__v := (float32)(__ret)
	return __v
}

// GetGestureDragVector function as declared in ray/raylib.h:1018
func GetGestureDragVector() Vector2 {
	__ret := C.GetGestureDragVector()
	__v := *NewVector2Ref(unsafe.Pointer(&__ret))
	return __v
}

// GetGestureDragAngle function as declared in ray/raylib.h:1019
func GetGestureDragAngle() float32 {
	__ret := C.GetGestureDragAngle()
	__v := (float32)(__ret)
	return __v
}

// GetGesturePinchVector function as declared in ray/raylib.h:1020
func GetGesturePinchVector() Vector2 {
	__ret := C.GetGesturePinchVector()
	__v := *NewVector2Ref(unsafe.Pointer(&__ret))
	return __v
}

// GetGesturePinchAngle function as declared in ray/raylib.h:1021
func GetGesturePinchAngle() float32 {
	__ret := C.GetGesturePinchAngle()
	__v := (float32)(__ret)
	return __v
}

// SetCameraMode function as declared in ray/raylib.h:1026
func SetCameraMode(camera Camera, mode int32) {
	ccamera, _ := camera.PassValue()
	cmode, _ := (C.int)(mode), cgoAllocsUnknown
	C.SetCameraMode(ccamera, cmode)
}

// UpdateCamera function as declared in ray/raylib.h:1027
func UpdateCamera(camera []Camera) {
	ccamera, _ := unpackArgSCamera(camera)
	C.UpdateCamera(ccamera)
	packSCamera(camera, ccamera)
}

// SetCameraPanControl function as declared in ray/raylib.h:1029
func SetCameraPanControl(panKey int32) {
	cpanKey, _ := (C.int)(panKey), cgoAllocsUnknown
	C.SetCameraPanControl(cpanKey)
}

// SetCameraAltControl function as declared in ray/raylib.h:1030
func SetCameraAltControl(altKey int32) {
	caltKey, _ := (C.int)(altKey), cgoAllocsUnknown
	C.SetCameraAltControl(caltKey)
}

// SetCameraSmoothZoomControl function as declared in ray/raylib.h:1031
func SetCameraSmoothZoomControl(szKey int32) {
	cszKey, _ := (C.int)(szKey), cgoAllocsUnknown
	C.SetCameraSmoothZoomControl(cszKey)
}

// SetCameraMoveControls function as declared in ray/raylib.h:1032
func SetCameraMoveControls(frontKey int32, backKey int32, rightKey int32, leftKey int32, upKey int32, downKey int32) {
	cfrontKey, _ := (C.int)(frontKey), cgoAllocsUnknown
	cbackKey, _ := (C.int)(backKey), cgoAllocsUnknown
	crightKey, _ := (C.int)(rightKey), cgoAllocsUnknown
	cleftKey, _ := (C.int)(leftKey), cgoAllocsUnknown
	cupKey, _ := (C.int)(upKey), cgoAllocsUnknown
	cdownKey, _ := (C.int)(downKey), cgoAllocsUnknown
	C.SetCameraMoveControls(cfrontKey, cbackKey, crightKey, cleftKey, cupKey, cdownKey)
}

// DrawPixel function as declared in ray/raylib.h:1039
func DrawPixel(posX int32, posY int32, color Color) {
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawPixel(cposX, cposY, ccolor)
}

// DrawPixelV function as declared in ray/raylib.h:1040
func DrawPixelV(position Vector2, color Color) {
	cposition, _ := position.PassValue()
	ccolor, _ := color.PassValue()
	C.DrawPixelV(cposition, ccolor)
}

// DrawLine function as declared in ray/raylib.h:1041
func DrawLine(startPosX int32, startPosY int32, endPosX int32, endPosY int32, color Color) {
	cstartPosX, _ := (C.int)(startPosX), cgoAllocsUnknown
	cstartPosY, _ := (C.int)(startPosY), cgoAllocsUnknown
	cendPosX, _ := (C.int)(endPosX), cgoAllocsUnknown
	cendPosY, _ := (C.int)(endPosY), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawLine(cstartPosX, cstartPosY, cendPosX, cendPosY, ccolor)
}

// DrawLineV function as declared in ray/raylib.h:1042
func DrawLineV(startPos Vector2, endPos Vector2, color Color) {
	cstartPos, _ := startPos.PassValue()
	cendPos, _ := endPos.PassValue()
	ccolor, _ := color.PassValue()
	C.DrawLineV(cstartPos, cendPos, ccolor)
}

// DrawLineEx function as declared in ray/raylib.h:1043
func DrawLineEx(startPos Vector2, endPos Vector2, thick float32, color Color) {
	cstartPos, _ := startPos.PassValue()
	cendPos, _ := endPos.PassValue()
	cthick, _ := (C.float)(thick), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawLineEx(cstartPos, cendPos, cthick, ccolor)
}

// DrawLineBezier function as declared in ray/raylib.h:1044
func DrawLineBezier(startPos Vector2, endPos Vector2, thick float32, color Color) {
	cstartPos, _ := startPos.PassValue()
	cendPos, _ := endPos.PassValue()
	cthick, _ := (C.float)(thick), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawLineBezier(cstartPos, cendPos, cthick, ccolor)
}

// DrawLineStrip function as declared in ray/raylib.h:1045
func DrawLineStrip(points []Vector2, numPoints int32, color Color) {
	cpoints, _ := unpackArgSVector2(points)
	cnumPoints, _ := (C.int)(numPoints), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawLineStrip(cpoints, cnumPoints, ccolor)
	packSVector2(points, cpoints)
}

// DrawCircle function as declared in ray/raylib.h:1046
func DrawCircle(centerX int32, centerY int32, radius float32, color Color) {
	ccenterX, _ := (C.int)(centerX), cgoAllocsUnknown
	ccenterY, _ := (C.int)(centerY), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawCircle(ccenterX, ccenterY, cradius, ccolor)
}

// DrawCircleSector function as declared in ray/raylib.h:1047
func DrawCircleSector(center Vector2, radius float32, startAngle int32, endAngle int32, segments int32, color Color) {
	ccenter, _ := center.PassValue()
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	cstartAngle, _ := (C.int)(startAngle), cgoAllocsUnknown
	cendAngle, _ := (C.int)(endAngle), cgoAllocsUnknown
	csegments, _ := (C.int)(segments), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawCircleSector(ccenter, cradius, cstartAngle, cendAngle, csegments, ccolor)
}

// DrawCircleSectorLines function as declared in ray/raylib.h:1048
func DrawCircleSectorLines(center Vector2, radius float32, startAngle int32, endAngle int32, segments int32, color Color) {
	ccenter, _ := center.PassValue()
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	cstartAngle, _ := (C.int)(startAngle), cgoAllocsUnknown
	cendAngle, _ := (C.int)(endAngle), cgoAllocsUnknown
	csegments, _ := (C.int)(segments), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawCircleSectorLines(ccenter, cradius, cstartAngle, cendAngle, csegments, ccolor)
}

// DrawCircleGradient function as declared in ray/raylib.h:1049
func DrawCircleGradient(centerX int32, centerY int32, radius float32, color1 Color, color2 Color) {
	ccenterX, _ := (C.int)(centerX), cgoAllocsUnknown
	ccenterY, _ := (C.int)(centerY), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	ccolor1, _ := color1.PassValue()
	ccolor2, _ := color2.PassValue()
	C.DrawCircleGradient(ccenterX, ccenterY, cradius, ccolor1, ccolor2)
}

// DrawCircleV function as declared in ray/raylib.h:1050
func DrawCircleV(center Vector2, radius float32, color Color) {
	ccenter, _ := center.PassValue()
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawCircleV(ccenter, cradius, ccolor)
}

// DrawCircleLines function as declared in ray/raylib.h:1051
func DrawCircleLines(centerX int32, centerY int32, radius float32, color Color) {
	ccenterX, _ := (C.int)(centerX), cgoAllocsUnknown
	ccenterY, _ := (C.int)(centerY), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawCircleLines(ccenterX, ccenterY, cradius, ccolor)
}

// DrawRing function as declared in ray/raylib.h:1052
func DrawRing(center Vector2, innerRadius float32, outerRadius float32, startAngle int32, endAngle int32, segments int32, color Color) {
	ccenter, _ := center.PassValue()
	cinnerRadius, _ := (C.float)(innerRadius), cgoAllocsUnknown
	couterRadius, _ := (C.float)(outerRadius), cgoAllocsUnknown
	cstartAngle, _ := (C.int)(startAngle), cgoAllocsUnknown
	cendAngle, _ := (C.int)(endAngle), cgoAllocsUnknown
	csegments, _ := (C.int)(segments), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawRing(ccenter, cinnerRadius, couterRadius, cstartAngle, cendAngle, csegments, ccolor)
}

// DrawRingLines function as declared in ray/raylib.h:1053
func DrawRingLines(center Vector2, innerRadius float32, outerRadius float32, startAngle int32, endAngle int32, segments int32, color Color) {
	ccenter, _ := center.PassValue()
	cinnerRadius, _ := (C.float)(innerRadius), cgoAllocsUnknown
	couterRadius, _ := (C.float)(outerRadius), cgoAllocsUnknown
	cstartAngle, _ := (C.int)(startAngle), cgoAllocsUnknown
	cendAngle, _ := (C.int)(endAngle), cgoAllocsUnknown
	csegments, _ := (C.int)(segments), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawRingLines(ccenter, cinnerRadius, couterRadius, cstartAngle, cendAngle, csegments, ccolor)
}

// DrawRectangle function as declared in ray/raylib.h:1054
func DrawRectangle(posX int32, posY int32, width int32, height int32, color Color) {
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawRectangle(cposX, cposY, cwidth, cheight, ccolor)
}

// DrawRectangleV function as declared in ray/raylib.h:1055
func DrawRectangleV(position Vector2, size Vector2, color Color) {
	cposition, _ := position.PassValue()
	csize, _ := size.PassValue()
	ccolor, _ := color.PassValue()
	C.DrawRectangleV(cposition, csize, ccolor)
}

// DrawRectangleRec function as declared in ray/raylib.h:1056
func DrawRectangleRec(rec Rectangle, color Color) {
	crec, _ := rec.PassValue()
	ccolor, _ := color.PassValue()
	C.DrawRectangleRec(crec, ccolor)
}

// DrawRectanglePro function as declared in ray/raylib.h:1057
func DrawRectanglePro(rec Rectangle, origin Vector2, rotation float32, color Color) {
	crec, _ := rec.PassValue()
	corigin, _ := origin.PassValue()
	crotation, _ := (C.float)(rotation), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawRectanglePro(crec, corigin, crotation, ccolor)
}

// DrawRectangleGradientV function as declared in ray/raylib.h:1058
func DrawRectangleGradientV(posX int32, posY int32, width int32, height int32, color1 Color, color2 Color) {
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	ccolor1, _ := color1.PassValue()
	ccolor2, _ := color2.PassValue()
	C.DrawRectangleGradientV(cposX, cposY, cwidth, cheight, ccolor1, ccolor2)
}

// DrawRectangleGradientH function as declared in ray/raylib.h:1059
func DrawRectangleGradientH(posX int32, posY int32, width int32, height int32, color1 Color, color2 Color) {
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	ccolor1, _ := color1.PassValue()
	ccolor2, _ := color2.PassValue()
	C.DrawRectangleGradientH(cposX, cposY, cwidth, cheight, ccolor1, ccolor2)
}

// DrawRectangleGradientEx function as declared in ray/raylib.h:1060
func DrawRectangleGradientEx(rec Rectangle, col1 Color, col2 Color, col3 Color, col4 Color) {
	crec, _ := rec.PassValue()
	ccol1, _ := col1.PassValue()
	ccol2, _ := col2.PassValue()
	ccol3, _ := col3.PassValue()
	ccol4, _ := col4.PassValue()
	C.DrawRectangleGradientEx(crec, ccol1, ccol2, ccol3, ccol4)
}

// DrawRectangleLines function as declared in ray/raylib.h:1061
func DrawRectangleLines(posX int32, posY int32, width int32, height int32, color Color) {
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawRectangleLines(cposX, cposY, cwidth, cheight, ccolor)
}

// DrawRectangleLinesEx function as declared in ray/raylib.h:1062
func DrawRectangleLinesEx(rec Rectangle, lineThick int32, color Color) {
	crec, _ := rec.PassValue()
	clineThick, _ := (C.int)(lineThick), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawRectangleLinesEx(crec, clineThick, ccolor)
}

// DrawRectangleRounded function as declared in ray/raylib.h:1063
func DrawRectangleRounded(rec Rectangle, roundness float32, segments int32, color Color) {
	crec, _ := rec.PassValue()
	croundness, _ := (C.float)(roundness), cgoAllocsUnknown
	csegments, _ := (C.int)(segments), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawRectangleRounded(crec, croundness, csegments, ccolor)
}

// DrawRectangleRoundedLines function as declared in ray/raylib.h:1064
func DrawRectangleRoundedLines(rec Rectangle, roundness float32, segments int32, lineThick int32, color Color) {
	crec, _ := rec.PassValue()
	croundness, _ := (C.float)(roundness), cgoAllocsUnknown
	csegments, _ := (C.int)(segments), cgoAllocsUnknown
	clineThick, _ := (C.int)(lineThick), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawRectangleRoundedLines(crec, croundness, csegments, clineThick, ccolor)
}

// DrawTriangle function as declared in ray/raylib.h:1065
func DrawTriangle(v1 Vector2, v2 Vector2, v3 Vector2, color Color) {
	cv1, _ := v1.PassValue()
	cv2, _ := v2.PassValue()
	cv3, _ := v3.PassValue()
	ccolor, _ := color.PassValue()
	C.DrawTriangle(cv1, cv2, cv3, ccolor)
}

// DrawTriangleLines function as declared in ray/raylib.h:1066
func DrawTriangleLines(v1 Vector2, v2 Vector2, v3 Vector2, color Color) {
	cv1, _ := v1.PassValue()
	cv2, _ := v2.PassValue()
	cv3, _ := v3.PassValue()
	ccolor, _ := color.PassValue()
	C.DrawTriangleLines(cv1, cv2, cv3, ccolor)
}

// DrawTriangleFan function as declared in ray/raylib.h:1067
func DrawTriangleFan(points []Vector2, numPoints int32, color Color) {
	cpoints, _ := unpackArgSVector2(points)
	cnumPoints, _ := (C.int)(numPoints), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawTriangleFan(cpoints, cnumPoints, ccolor)
	packSVector2(points, cpoints)
}

// DrawTriangleStrip function as declared in ray/raylib.h:1068
func DrawTriangleStrip(points []Vector2, pointsCount int32, color Color) {
	cpoints, _ := unpackArgSVector2(points)
	cpointsCount, _ := (C.int)(pointsCount), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawTriangleStrip(cpoints, cpointsCount, ccolor)
	packSVector2(points, cpoints)
}

// DrawPoly function as declared in ray/raylib.h:1069
func DrawPoly(center Vector2, sides int32, radius float32, rotation float32, color Color) {
	ccenter, _ := center.PassValue()
	csides, _ := (C.int)(sides), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	crotation, _ := (C.float)(rotation), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawPoly(ccenter, csides, cradius, crotation, ccolor)
}

// SetShapesTexture function as declared in ray/raylib.h:1071
func SetShapesTexture(texture Texture2D, source Rectangle) {
	ctexture, _ := texture.PassValue()
	csource, _ := source.PassValue()
	C.SetShapesTexture(ctexture, csource)
}

// CheckCollisionRecs function as declared in ray/raylib.h:1074
func CheckCollisionRecs(rec1 Rectangle, rec2 Rectangle) bool {
	crec1, _ := rec1.PassValue()
	crec2, _ := rec2.PassValue()
	__ret := C.CheckCollisionRecs(crec1, crec2)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionCircles function as declared in ray/raylib.h:1075
func CheckCollisionCircles(center1 Vector2, radius1 float32, center2 Vector2, radius2 float32) bool {
	ccenter1, _ := center1.PassValue()
	cradius1, _ := (C.float)(radius1), cgoAllocsUnknown
	ccenter2, _ := center2.PassValue()
	cradius2, _ := (C.float)(radius2), cgoAllocsUnknown
	__ret := C.CheckCollisionCircles(ccenter1, cradius1, ccenter2, cradius2)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionCircleRec function as declared in ray/raylib.h:1076
func CheckCollisionCircleRec(center Vector2, radius float32, rec Rectangle) bool {
	ccenter, _ := center.PassValue()
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	crec, _ := rec.PassValue()
	__ret := C.CheckCollisionCircleRec(ccenter, cradius, crec)
	__v := (bool)(__ret)
	return __v
}

// GetCollisionRec function as declared in ray/raylib.h:1077
func GetCollisionRec(rec1 Rectangle, rec2 Rectangle) Rectangle {
	crec1, _ := rec1.PassValue()
	crec2, _ := rec2.PassValue()
	__ret := C.GetCollisionRec(crec1, crec2)
	__v := *NewRectangleRef(unsafe.Pointer(&__ret))
	return __v
}

// CheckCollisionPointRec function as declared in ray/raylib.h:1078
func CheckCollisionPointRec(point Vector2, rec Rectangle) bool {
	cpoint, _ := point.PassValue()
	crec, _ := rec.PassValue()
	__ret := C.CheckCollisionPointRec(cpoint, crec)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionPointCircle function as declared in ray/raylib.h:1079
func CheckCollisionPointCircle(point Vector2, center Vector2, radius float32) bool {
	cpoint, _ := point.PassValue()
	ccenter, _ := center.PassValue()
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	__ret := C.CheckCollisionPointCircle(cpoint, ccenter, cradius)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionPointTriangle function as declared in ray/raylib.h:1080
func CheckCollisionPointTriangle(point Vector2, p1 Vector2, p2 Vector2, p3 Vector2) bool {
	cpoint, _ := point.PassValue()
	cp1, _ := p1.PassValue()
	cp2, _ := p2.PassValue()
	cp3, _ := p3.PassValue()
	__ret := C.CheckCollisionPointTriangle(cpoint, cp1, cp2, cp3)
	__v := (bool)(__ret)
	return __v
}

// LoadImage function as declared in ray/raylib.h:1087
func LoadImage(fileName string) Image {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.LoadImage(cfileName)
	runtime.KeepAlive(fileName)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// LoadImageEx function as declared in ray/raylib.h:1088
func LoadImageEx(pixels []Color, width int32, height int32) Image {
	cpixels, _ := unpackArgSColor(pixels)
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	__ret := C.LoadImageEx(cpixels, cwidth, cheight)
	packSColor(pixels, cpixels)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// LoadImagePro function as declared in ray/raylib.h:1089
func LoadImagePro(data unsafe.Pointer, width int32, height int32, format int32) Image {
	cdata, _ := data, cgoAllocsUnknown
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	cformat, _ := (C.int)(format), cgoAllocsUnknown
	__ret := C.LoadImagePro(cdata, cwidth, cheight, cformat)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// LoadImageRaw function as declared in ray/raylib.h:1090
func LoadImageRaw(fileName string, width int32, height int32, format int32, headerSize int32) Image {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	cformat, _ := (C.int)(format), cgoAllocsUnknown
	cheaderSize, _ := (C.int)(headerSize), cgoAllocsUnknown
	__ret := C.LoadImageRaw(cfileName, cwidth, cheight, cformat, cheaderSize)
	runtime.KeepAlive(fileName)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// ExportImage function as declared in ray/raylib.h:1091
func ExportImage(image Image, fileName string) {
	cimage, _ := image.PassValue()
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	C.ExportImage(cimage, cfileName)
	runtime.KeepAlive(fileName)
}

// ExportImageAsCode function as declared in ray/raylib.h:1092
func ExportImageAsCode(image Image, fileName string) {
	cimage, _ := image.PassValue()
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	C.ExportImageAsCode(cimage, cfileName)
	runtime.KeepAlive(fileName)
}

// LoadTexture function as declared in ray/raylib.h:1093
func LoadTexture(fileName string) Texture2D {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.LoadTexture(cfileName)
	runtime.KeepAlive(fileName)
	__v := *NewTexture2DRef(unsafe.Pointer(&__ret))
	return __v
}

// LoadTextureFromImage function as declared in ray/raylib.h:1094
func LoadTextureFromImage(image Image) Texture2D {
	cimage, _ := image.PassValue()
	__ret := C.LoadTextureFromImage(cimage)
	__v := *NewTexture2DRef(unsafe.Pointer(&__ret))
	return __v
}

// LoadTextureCubemap function as declared in ray/raylib.h:1095
func LoadTextureCubemap(image Image, layoutType int32) TextureCubemap {
	cimage, _ := image.PassValue()
	clayoutType, _ := (C.int)(layoutType), cgoAllocsUnknown
	__ret := C.LoadTextureCubemap(cimage, clayoutType)
	__v := *NewTextureCubemapRef(unsafe.Pointer(&__ret))
	return __v
}

// LoadRenderTexture function as declared in ray/raylib.h:1096
func LoadRenderTexture(width int32, height int32) RenderTexture2D {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	__ret := C.LoadRenderTexture(cwidth, cheight)
	__v := *NewRenderTexture2DRef(unsafe.Pointer(&__ret))
	return __v
}

// UnloadImage function as declared in ray/raylib.h:1097
func UnloadImage(image Image) {
	cimage, _ := image.PassValue()
	C.UnloadImage(cimage)
}

// UnloadTexture function as declared in ray/raylib.h:1098
func UnloadTexture(texture Texture2D) {
	ctexture, _ := texture.PassValue()
	C.UnloadTexture(ctexture)
}

// UnloadRenderTexture function as declared in ray/raylib.h:1099
func UnloadRenderTexture(target RenderTexture2D) {
	ctarget, _ := target.PassValue()
	C.UnloadRenderTexture(ctarget)
}

// GetImageData function as declared in ray/raylib.h:1100
func GetImageData(image Image) []Color {
	cimage, _ := image.PassValue()
	__ret := C.GetImageData(cimage)
	var __v []Color
	packSColor(__v, __ret)
	return __v
}

// GetImageDataNormalized function as declared in ray/raylib.h:1101
func GetImageDataNormalized(image Image) []Vector4 {
	cimage, _ := image.PassValue()
	__ret := C.GetImageDataNormalized(cimage)
	var __v []Vector4
	packSVector4(__v, __ret)
	return __v
}

// GetImageAlphaBorder function as declared in ray/raylib.h:1102
func GetImageAlphaBorder(image Image, threshold float32) Rectangle {
	cimage, _ := image.PassValue()
	cthreshold, _ := (C.float)(threshold), cgoAllocsUnknown
	__ret := C.GetImageAlphaBorder(cimage, cthreshold)
	__v := *NewRectangleRef(unsafe.Pointer(&__ret))
	return __v
}

// GetPixelDataSize function as declared in ray/raylib.h:1103
func GetPixelDataSize(width int32, height int32, format int32) int32 {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	cformat, _ := (C.int)(format), cgoAllocsUnknown
	__ret := C.GetPixelDataSize(cwidth, cheight, cformat)
	__v := (int32)(__ret)
	return __v
}

// GetTextureData function as declared in ray/raylib.h:1104
func GetTextureData(texture Texture2D) Image {
	ctexture, _ := texture.PassValue()
	__ret := C.GetTextureData(ctexture)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// GetScreenData function as declared in ray/raylib.h:1105
func GetScreenData() Image {
	__ret := C.GetScreenData()
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// UpdateTexture function as declared in ray/raylib.h:1106
func UpdateTexture(texture Texture2D, pixels unsafe.Pointer) {
	ctexture, _ := texture.PassValue()
	cpixels, _ := pixels, cgoAllocsUnknown
	C.UpdateTexture(ctexture, cpixels)
}

// ImageCopy function as declared in ray/raylib.h:1109
func ImageCopy(image Image) Image {
	cimage, _ := image.PassValue()
	__ret := C.ImageCopy(cimage)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// ImageFromImage function as declared in ray/raylib.h:1110
func ImageFromImage(image Image, rec Rectangle) Image {
	cimage, _ := image.PassValue()
	crec, _ := rec.PassValue()
	__ret := C.ImageFromImage(cimage, crec)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// ImageToPOT function as declared in ray/raylib.h:1111
func ImageToPOT(image []Image, fillColor Color) {
	cimage, _ := unpackArgSImage(image)
	cfillColor, _ := fillColor.PassValue()
	C.ImageToPOT(cimage, cfillColor)
	packSImage(image, cimage)
}

// ImageFormat function as declared in ray/raylib.h:1112
func ImageFormat(image []Image, newFormat int32) {
	cimage, _ := unpackArgSImage(image)
	cnewFormat, _ := (C.int)(newFormat), cgoAllocsUnknown
	C.ImageFormat(cimage, cnewFormat)
	packSImage(image, cimage)
}

// ImageAlphaMask function as declared in ray/raylib.h:1113
func ImageAlphaMask(image []Image, alphaMask Image) {
	cimage, _ := unpackArgSImage(image)
	calphaMask, _ := alphaMask.PassValue()
	C.ImageAlphaMask(cimage, calphaMask)
	packSImage(image, cimage)
}

// ImageAlphaClear function as declared in ray/raylib.h:1114
func ImageAlphaClear(image []Image, color Color, threshold float32) {
	cimage, _ := unpackArgSImage(image)
	ccolor, _ := color.PassValue()
	cthreshold, _ := (C.float)(threshold), cgoAllocsUnknown
	C.ImageAlphaClear(cimage, ccolor, cthreshold)
	packSImage(image, cimage)
}

// ImageAlphaCrop function as declared in ray/raylib.h:1115
func ImageAlphaCrop(image []Image, threshold float32) {
	cimage, _ := unpackArgSImage(image)
	cthreshold, _ := (C.float)(threshold), cgoAllocsUnknown
	C.ImageAlphaCrop(cimage, cthreshold)
	packSImage(image, cimage)
}

// ImageAlphaPremultiply function as declared in ray/raylib.h:1116
func ImageAlphaPremultiply(image []Image) {
	cimage, _ := unpackArgSImage(image)
	C.ImageAlphaPremultiply(cimage)
	packSImage(image, cimage)
}

// ImageCrop function as declared in ray/raylib.h:1117
func ImageCrop(image []Image, crop Rectangle) {
	cimage, _ := unpackArgSImage(image)
	ccrop, _ := crop.PassValue()
	C.ImageCrop(cimage, ccrop)
	packSImage(image, cimage)
}

// ImageResize function as declared in ray/raylib.h:1118
func ImageResize(image []Image, newWidth int32, newHeight int32) {
	cimage, _ := unpackArgSImage(image)
	cnewWidth, _ := (C.int)(newWidth), cgoAllocsUnknown
	cnewHeight, _ := (C.int)(newHeight), cgoAllocsUnknown
	C.ImageResize(cimage, cnewWidth, cnewHeight)
	packSImage(image, cimage)
}

// ImageResizeNN function as declared in ray/raylib.h:1119
func ImageResizeNN(image []Image, newWidth int32, newHeight int32) {
	cimage, _ := unpackArgSImage(image)
	cnewWidth, _ := (C.int)(newWidth), cgoAllocsUnknown
	cnewHeight, _ := (C.int)(newHeight), cgoAllocsUnknown
	C.ImageResizeNN(cimage, cnewWidth, cnewHeight)
	packSImage(image, cimage)
}

// ImageResizeCanvas function as declared in ray/raylib.h:1120
func ImageResizeCanvas(image []Image, newWidth int32, newHeight int32, offsetX int32, offsetY int32, color Color) {
	cimage, _ := unpackArgSImage(image)
	cnewWidth, _ := (C.int)(newWidth), cgoAllocsUnknown
	cnewHeight, _ := (C.int)(newHeight), cgoAllocsUnknown
	coffsetX, _ := (C.int)(offsetX), cgoAllocsUnknown
	coffsetY, _ := (C.int)(offsetY), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.ImageResizeCanvas(cimage, cnewWidth, cnewHeight, coffsetX, coffsetY, ccolor)
	packSImage(image, cimage)
}

// ImageMipmaps function as declared in ray/raylib.h:1121
func ImageMipmaps(image []Image) {
	cimage, _ := unpackArgSImage(image)
	C.ImageMipmaps(cimage)
	packSImage(image, cimage)
}

// ImageDither function as declared in ray/raylib.h:1122
func ImageDither(image []Image, rBpp int32, gBpp int32, bBpp int32, aBpp int32) {
	cimage, _ := unpackArgSImage(image)
	crBpp, _ := (C.int)(rBpp), cgoAllocsUnknown
	cgBpp, _ := (C.int)(gBpp), cgoAllocsUnknown
	cbBpp, _ := (C.int)(bBpp), cgoAllocsUnknown
	caBpp, _ := (C.int)(aBpp), cgoAllocsUnknown
	C.ImageDither(cimage, crBpp, cgBpp, cbBpp, caBpp)
	packSImage(image, cimage)
}

// ImageExtractPalette function as declared in ray/raylib.h:1123
func ImageExtractPalette(image Image, maxPaletteSize int32, extractCount []int32) []Color {
	cimage, _ := image.PassValue()
	cmaxPaletteSize, _ := (C.int)(maxPaletteSize), cgoAllocsUnknown
	cextractCount, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&extractCount)).Data)), cgoAllocsUnknown
	__ret := C.ImageExtractPalette(cimage, cmaxPaletteSize, cextractCount)
	var __v []Color
	packSColor(__v, __ret)
	return __v
}

// ImageText function as declared in ray/raylib.h:1124
func ImageText(text string, fontSize int32, color Color) Image {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cfontSize, _ := (C.int)(fontSize), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	__ret := C.ImageText(ctext, cfontSize, ccolor)
	runtime.KeepAlive(text)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// ImageTextEx function as declared in ray/raylib.h:1125
func ImageTextEx(font Font, text string, fontSize float32, spacing float32, tint Color) Image {
	cfont, _ := font.PassValue()
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cfontSize, _ := (C.float)(fontSize), cgoAllocsUnknown
	cspacing, _ := (C.float)(spacing), cgoAllocsUnknown
	ctint, _ := tint.PassValue()
	__ret := C.ImageTextEx(cfont, ctext, cfontSize, cspacing, ctint)
	runtime.KeepAlive(text)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// ImageDraw function as declared in ray/raylib.h:1126
func ImageDraw(dst []Image, src Image, srcRec Rectangle, dstRec Rectangle, tint Color) {
	cdst, _ := unpackArgSImage(dst)
	csrc, _ := src.PassValue()
	csrcRec, _ := srcRec.PassValue()
	cdstRec, _ := dstRec.PassValue()
	ctint, _ := tint.PassValue()
	C.ImageDraw(cdst, csrc, csrcRec, cdstRec, ctint)
	packSImage(dst, cdst)
}

// ImageDrawRectangle function as declared in ray/raylib.h:1127
func ImageDrawRectangle(dst []Image, rec Rectangle, color Color) {
	cdst, _ := unpackArgSImage(dst)
	crec, _ := rec.PassValue()
	ccolor, _ := color.PassValue()
	C.ImageDrawRectangle(cdst, crec, ccolor)
	packSImage(dst, cdst)
}

// ImageDrawRectangleLines function as declared in ray/raylib.h:1128
func ImageDrawRectangleLines(dst []Image, rec Rectangle, thick int32, color Color) {
	cdst, _ := unpackArgSImage(dst)
	crec, _ := rec.PassValue()
	cthick, _ := (C.int)(thick), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.ImageDrawRectangleLines(cdst, crec, cthick, ccolor)
	packSImage(dst, cdst)
}

// ImageDrawText function as declared in ray/raylib.h:1129
func ImageDrawText(dst []Image, position Vector2, text string, fontSize int32, color Color) {
	cdst, _ := unpackArgSImage(dst)
	cposition, _ := position.PassValue()
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cfontSize, _ := (C.int)(fontSize), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.ImageDrawText(cdst, cposition, ctext, cfontSize, ccolor)
	runtime.KeepAlive(text)
	packSImage(dst, cdst)
}

// ImageDrawTextEx function as declared in ray/raylib.h:1130
func ImageDrawTextEx(dst []Image, position Vector2, font Font, text string, fontSize float32, spacing float32, color Color) {
	cdst, _ := unpackArgSImage(dst)
	cposition, _ := position.PassValue()
	cfont, _ := font.PassValue()
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cfontSize, _ := (C.float)(fontSize), cgoAllocsUnknown
	cspacing, _ := (C.float)(spacing), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.ImageDrawTextEx(cdst, cposition, cfont, ctext, cfontSize, cspacing, ccolor)
	runtime.KeepAlive(text)
	packSImage(dst, cdst)
}

// ImageFlipVertical function as declared in ray/raylib.h:1131
func ImageFlipVertical(image []Image) {
	cimage, _ := unpackArgSImage(image)
	C.ImageFlipVertical(cimage)
	packSImage(image, cimage)
}

// ImageFlipHorizontal function as declared in ray/raylib.h:1132
func ImageFlipHorizontal(image []Image) {
	cimage, _ := unpackArgSImage(image)
	C.ImageFlipHorizontal(cimage)
	packSImage(image, cimage)
}

// ImageRotateCW function as declared in ray/raylib.h:1133
func ImageRotateCW(image []Image) {
	cimage, _ := unpackArgSImage(image)
	C.ImageRotateCW(cimage)
	packSImage(image, cimage)
}

// ImageRotateCCW function as declared in ray/raylib.h:1134
func ImageRotateCCW(image []Image) {
	cimage, _ := unpackArgSImage(image)
	C.ImageRotateCCW(cimage)
	packSImage(image, cimage)
}

// ImageColorTint function as declared in ray/raylib.h:1135
func ImageColorTint(image []Image, color Color) {
	cimage, _ := unpackArgSImage(image)
	ccolor, _ := color.PassValue()
	C.ImageColorTint(cimage, ccolor)
	packSImage(image, cimage)
}

// ImageColorInvert function as declared in ray/raylib.h:1136
func ImageColorInvert(image []Image) {
	cimage, _ := unpackArgSImage(image)
	C.ImageColorInvert(cimage)
	packSImage(image, cimage)
}

// ImageColorGrayscale function as declared in ray/raylib.h:1137
func ImageColorGrayscale(image []Image) {
	cimage, _ := unpackArgSImage(image)
	C.ImageColorGrayscale(cimage)
	packSImage(image, cimage)
}

// ImageColorContrast function as declared in ray/raylib.h:1138
func ImageColorContrast(image []Image, contrast float32) {
	cimage, _ := unpackArgSImage(image)
	ccontrast, _ := (C.float)(contrast), cgoAllocsUnknown
	C.ImageColorContrast(cimage, ccontrast)
	packSImage(image, cimage)
}

// ImageColorBrightness function as declared in ray/raylib.h:1139
func ImageColorBrightness(image []Image, brightness int32) {
	cimage, _ := unpackArgSImage(image)
	cbrightness, _ := (C.int)(brightness), cgoAllocsUnknown
	C.ImageColorBrightness(cimage, cbrightness)
	packSImage(image, cimage)
}

// ImageColorReplace function as declared in ray/raylib.h:1140
func ImageColorReplace(image []Image, color Color, replace Color) {
	cimage, _ := unpackArgSImage(image)
	ccolor, _ := color.PassValue()
	creplace, _ := replace.PassValue()
	C.ImageColorReplace(cimage, ccolor, creplace)
	packSImage(image, cimage)
}

// GenImageColor function as declared in ray/raylib.h:1143
func GenImageColor(width int32, height int32, color Color) Image {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	__ret := C.GenImageColor(cwidth, cheight, ccolor)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// GenImageGradientV function as declared in ray/raylib.h:1144
func GenImageGradientV(width int32, height int32, top Color, bottom Color) Image {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	ctop, _ := top.PassValue()
	cbottom, _ := bottom.PassValue()
	__ret := C.GenImageGradientV(cwidth, cheight, ctop, cbottom)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// GenImageGradientH function as declared in ray/raylib.h:1145
func GenImageGradientH(width int32, height int32, left Color, right Color) Image {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	cleft, _ := left.PassValue()
	cright, _ := right.PassValue()
	__ret := C.GenImageGradientH(cwidth, cheight, cleft, cright)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// GenImageGradientRadial function as declared in ray/raylib.h:1146
func GenImageGradientRadial(width int32, height int32, density float32, inner Color, outer Color) Image {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	cdensity, _ := (C.float)(density), cgoAllocsUnknown
	cinner, _ := inner.PassValue()
	couter, _ := outer.PassValue()
	__ret := C.GenImageGradientRadial(cwidth, cheight, cdensity, cinner, couter)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// GenImageChecked function as declared in ray/raylib.h:1147
func GenImageChecked(width int32, height int32, checksX int32, checksY int32, col1 Color, col2 Color) Image {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	cchecksX, _ := (C.int)(checksX), cgoAllocsUnknown
	cchecksY, _ := (C.int)(checksY), cgoAllocsUnknown
	ccol1, _ := col1.PassValue()
	ccol2, _ := col2.PassValue()
	__ret := C.GenImageChecked(cwidth, cheight, cchecksX, cchecksY, ccol1, ccol2)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// GenImageWhiteNoise function as declared in ray/raylib.h:1148
func GenImageWhiteNoise(width int32, height int32, factor float32) Image {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	cfactor, _ := (C.float)(factor), cgoAllocsUnknown
	__ret := C.GenImageWhiteNoise(cwidth, cheight, cfactor)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// GenImagePerlinNoise function as declared in ray/raylib.h:1149
func GenImagePerlinNoise(width int32, height int32, offsetX int32, offsetY int32, scale float32) Image {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	coffsetX, _ := (C.int)(offsetX), cgoAllocsUnknown
	coffsetY, _ := (C.int)(offsetY), cgoAllocsUnknown
	cscale, _ := (C.float)(scale), cgoAllocsUnknown
	__ret := C.GenImagePerlinNoise(cwidth, cheight, coffsetX, coffsetY, cscale)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// GenImageCellular function as declared in ray/raylib.h:1150
func GenImageCellular(width int32, height int32, tileSize int32) Image {
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	ctileSize, _ := (C.int)(tileSize), cgoAllocsUnknown
	__ret := C.GenImageCellular(cwidth, cheight, ctileSize)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// GenTextureMipmaps function as declared in ray/raylib.h:1153
func GenTextureMipmaps(texture []Texture2D) {
	ctexture, _ := unpackArgSTexture2D(texture)
	C.GenTextureMipmaps(ctexture)
	packSTexture2D(texture, ctexture)
}

// SetTextureFilter function as declared in ray/raylib.h:1154
func SetTextureFilter(texture Texture2D, filterMode int32) {
	ctexture, _ := texture.PassValue()
	cfilterMode, _ := (C.int)(filterMode), cgoAllocsUnknown
	C.SetTextureFilter(ctexture, cfilterMode)
}

// SetTextureWrap function as declared in ray/raylib.h:1155
func SetTextureWrap(texture Texture2D, wrapMode int32) {
	ctexture, _ := texture.PassValue()
	cwrapMode, _ := (C.int)(wrapMode), cgoAllocsUnknown
	C.SetTextureWrap(ctexture, cwrapMode)
}

// DrawTexture function as declared in ray/raylib.h:1158
func DrawTexture(texture Texture2D, posX int32, posY int32, tint Color) {
	ctexture, _ := texture.PassValue()
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	ctint, _ := tint.PassValue()
	C.DrawTexture(ctexture, cposX, cposY, ctint)
}

// DrawTextureV function as declared in ray/raylib.h:1159
func DrawTextureV(texture Texture2D, position Vector2, tint Color) {
	ctexture, _ := texture.PassValue()
	cposition, _ := position.PassValue()
	ctint, _ := tint.PassValue()
	C.DrawTextureV(ctexture, cposition, ctint)
}

// DrawTextureEx function as declared in ray/raylib.h:1160
func DrawTextureEx(texture Texture2D, position Vector2, rotation float32, scale float32, tint Color) {
	ctexture, _ := texture.PassValue()
	cposition, _ := position.PassValue()
	crotation, _ := (C.float)(rotation), cgoAllocsUnknown
	cscale, _ := (C.float)(scale), cgoAllocsUnknown
	ctint, _ := tint.PassValue()
	C.DrawTextureEx(ctexture, cposition, crotation, cscale, ctint)
}

// DrawTextureRec function as declared in ray/raylib.h:1161
func DrawTextureRec(texture Texture2D, sourceRec Rectangle, position Vector2, tint Color) {
	ctexture, _ := texture.PassValue()
	csourceRec, _ := sourceRec.PassValue()
	cposition, _ := position.PassValue()
	ctint, _ := tint.PassValue()
	C.DrawTextureRec(ctexture, csourceRec, cposition, ctint)
}

// DrawTextureQuad function as declared in ray/raylib.h:1162
func DrawTextureQuad(texture Texture2D, tiling Vector2, offset Vector2, quad Rectangle, tint Color) {
	ctexture, _ := texture.PassValue()
	ctiling, _ := tiling.PassValue()
	coffset, _ := offset.PassValue()
	cquad, _ := quad.PassValue()
	ctint, _ := tint.PassValue()
	C.DrawTextureQuad(ctexture, ctiling, coffset, cquad, ctint)
}

// DrawTexturePro function as declared in ray/raylib.h:1163
func DrawTexturePro(texture Texture2D, sourceRec Rectangle, destRec Rectangle, origin Vector2, rotation float32, tint Color) {
	ctexture, _ := texture.PassValue()
	csourceRec, _ := sourceRec.PassValue()
	cdestRec, _ := destRec.PassValue()
	corigin, _ := origin.PassValue()
	crotation, _ := (C.float)(rotation), cgoAllocsUnknown
	ctint, _ := tint.PassValue()
	C.DrawTexturePro(ctexture, csourceRec, cdestRec, corigin, crotation, ctint)
}

// DrawTextureNPatch function as declared in ray/raylib.h:1164
func DrawTextureNPatch(texture Texture2D, nPatchInfo NPatchInfo, destRec Rectangle, origin Vector2, rotation float32, tint Color) {
	ctexture, _ := texture.PassValue()
	cnPatchInfo, _ := nPatchInfo.PassValue()
	cdestRec, _ := destRec.PassValue()
	corigin, _ := origin.PassValue()
	crotation, _ := (C.float)(rotation), cgoAllocsUnknown
	ctint, _ := tint.PassValue()
	C.DrawTextureNPatch(ctexture, cnPatchInfo, cdestRec, corigin, crotation, ctint)
}

// GetFontDefault function as declared in ray/raylib.h:1171
func GetFontDefault() Font {
	__ret := C.GetFontDefault()
	__v := *NewFontRef(unsafe.Pointer(&__ret))
	return __v
}

// LoadFont function as declared in ray/raylib.h:1172
func LoadFont(fileName string) Font {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.LoadFont(cfileName)
	runtime.KeepAlive(fileName)
	__v := *NewFontRef(unsafe.Pointer(&__ret))
	return __v
}

// LoadFontEx function as declared in ray/raylib.h:1173
func LoadFontEx(fileName string, fontSize int32, fontChars []int32, charsCount int32) Font {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	cfontSize, _ := (C.int)(fontSize), cgoAllocsUnknown
	cfontChars, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&fontChars)).Data)), cgoAllocsUnknown
	ccharsCount, _ := (C.int)(charsCount), cgoAllocsUnknown
	__ret := C.LoadFontEx(cfileName, cfontSize, cfontChars, ccharsCount)
	runtime.KeepAlive(fileName)
	__v := *NewFontRef(unsafe.Pointer(&__ret))
	return __v
}

// LoadFontFromImage function as declared in ray/raylib.h:1174
func LoadFontFromImage(image Image, key Color, firstChar int32) Font {
	cimage, _ := image.PassValue()
	ckey, _ := key.PassValue()
	cfirstChar, _ := (C.int)(firstChar), cgoAllocsUnknown
	__ret := C.LoadFontFromImage(cimage, ckey, cfirstChar)
	__v := *NewFontRef(unsafe.Pointer(&__ret))
	return __v
}

// LoadFontData function as declared in ray/raylib.h:1175
func LoadFontData(fileName string, fontSize int32, fontChars []int32, charsCount int32, kind int32) []CharInfo {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	cfontSize, _ := (C.int)(fontSize), cgoAllocsUnknown
	cfontChars, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&fontChars)).Data)), cgoAllocsUnknown
	ccharsCount, _ := (C.int)(charsCount), cgoAllocsUnknown
	ckind, _ := (C.int)(kind), cgoAllocsUnknown
	__ret := C.LoadFontData(cfileName, cfontSize, cfontChars, ccharsCount, ckind)
	runtime.KeepAlive(fileName)
	var __v []CharInfo
	packSCharInfo(__v, __ret)
	return __v
}

// GenImageFontAtlas function as declared in ray/raylib.h:1176
func GenImageFontAtlas(chars []CharInfo, recs [][]Rectangle, charsCount int32, fontSize int32, padding int32, packMethod int32) Image {
	cchars, _ := unpackArgSCharInfo(chars)
	crecs, _ := unpackArgSSRectangle(recs)
	ccharsCount, _ := (C.int)(charsCount), cgoAllocsUnknown
	cfontSize, _ := (C.int)(fontSize), cgoAllocsUnknown
	cpadding, _ := (C.int)(padding), cgoAllocsUnknown
	cpackMethod, _ := (C.int)(packMethod), cgoAllocsUnknown
	__ret := C.GenImageFontAtlas(cchars, crecs, ccharsCount, cfontSize, cpadding, cpackMethod)
	packSSRectangle(recs, crecs)
	packSCharInfo(chars, cchars)
	__v := *NewImageRef(unsafe.Pointer(&__ret))
	return __v
}

// UnloadFont function as declared in ray/raylib.h:1177
func UnloadFont(font Font) {
	cfont, _ := font.PassValue()
	C.UnloadFont(cfont)
}

// DrawFPS function as declared in ray/raylib.h:1180
func DrawFPS(posX int32, posY int32) {
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	C.DrawFPS(cposX, cposY)
}

// DrawText function as declared in ray/raylib.h:1181
func DrawText(text string, posX int32, posY int32, fontSize int32, color Color) {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cposX, _ := (C.int)(posX), cgoAllocsUnknown
	cposY, _ := (C.int)(posY), cgoAllocsUnknown
	cfontSize, _ := (C.int)(fontSize), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawText(ctext, cposX, cposY, cfontSize, ccolor)
	runtime.KeepAlive(text)
}

// DrawTextEx function as declared in ray/raylib.h:1182
func DrawTextEx(font Font, text string, position Vector2, fontSize float32, spacing float32, tint Color) {
	cfont, _ := font.PassValue()
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cposition, _ := position.PassValue()
	cfontSize, _ := (C.float)(fontSize), cgoAllocsUnknown
	cspacing, _ := (C.float)(spacing), cgoAllocsUnknown
	ctint, _ := tint.PassValue()
	C.DrawTextEx(cfont, ctext, cposition, cfontSize, cspacing, ctint)
	runtime.KeepAlive(text)
}

// DrawTextRec function as declared in ray/raylib.h:1183
func DrawTextRec(font Font, text string, rec Rectangle, fontSize float32, spacing float32, wordWrap bool, tint Color) {
	cfont, _ := font.PassValue()
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	crec, _ := rec.PassValue()
	cfontSize, _ := (C.float)(fontSize), cgoAllocsUnknown
	cspacing, _ := (C.float)(spacing), cgoAllocsUnknown
	cwordWrap, _ := (C._Bool)(wordWrap), cgoAllocsUnknown
	ctint, _ := tint.PassValue()
	C.DrawTextRec(cfont, ctext, crec, cfontSize, cspacing, cwordWrap, ctint)
	runtime.KeepAlive(text)
}

// DrawTextRecEx function as declared in ray/raylib.h:1184
func DrawTextRecEx(font Font, text string, rec Rectangle, fontSize float32, spacing float32, wordWrap bool, tint Color, selectStart int32, selectLength int32, selectText Color, selectBack Color) {
	cfont, _ := font.PassValue()
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	crec, _ := rec.PassValue()
	cfontSize, _ := (C.float)(fontSize), cgoAllocsUnknown
	cspacing, _ := (C.float)(spacing), cgoAllocsUnknown
	cwordWrap, _ := (C._Bool)(wordWrap), cgoAllocsUnknown
	ctint, _ := tint.PassValue()
	cselectStart, _ := (C.int)(selectStart), cgoAllocsUnknown
	cselectLength, _ := (C.int)(selectLength), cgoAllocsUnknown
	cselectText, _ := selectText.PassValue()
	cselectBack, _ := selectBack.PassValue()
	C.DrawTextRecEx(cfont, ctext, crec, cfontSize, cspacing, cwordWrap, ctint, cselectStart, cselectLength, cselectText, cselectBack)
	runtime.KeepAlive(text)
}

// MeasureText function as declared in ray/raylib.h:1188
func MeasureText(text string, fontSize int32) int32 {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cfontSize, _ := (C.int)(fontSize), cgoAllocsUnknown
	__ret := C.MeasureText(ctext, cfontSize)
	runtime.KeepAlive(text)
	__v := (int32)(__ret)
	return __v
}

// MeasureTextEx function as declared in ray/raylib.h:1189
func MeasureTextEx(font Font, text string, fontSize float32, spacing float32) Vector2 {
	cfont, _ := font.PassValue()
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cfontSize, _ := (C.float)(fontSize), cgoAllocsUnknown
	cspacing, _ := (C.float)(spacing), cgoAllocsUnknown
	__ret := C.MeasureTextEx(cfont, ctext, cfontSize, cspacing)
	runtime.KeepAlive(text)
	__v := *NewVector2Ref(unsafe.Pointer(&__ret))
	return __v
}

// GetGlyphIndex function as declared in ray/raylib.h:1190
func GetGlyphIndex(font Font, character int32) int32 {
	cfont, _ := font.PassValue()
	ccharacter, _ := (C.int)(character), cgoAllocsUnknown
	__ret := C.GetGlyphIndex(cfont, ccharacter)
	__v := (int32)(__ret)
	return __v
}

// TextIsEqual function as declared in ray/raylib.h:1194
func TextIsEqual(text1 string, text2 string) bool {
	text1 = safeString(text1)
	ctext1, _ := unpackPCharString(text1)
	text2 = safeString(text2)
	ctext2, _ := unpackPCharString(text2)
	__ret := C.TextIsEqual(ctext1, ctext2)
	runtime.KeepAlive(text2)
	runtime.KeepAlive(text1)
	__v := (bool)(__ret)
	return __v
}

// TextLength function as declared in ray/raylib.h:1195
func TextLength(text string) uint32 {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	__ret := C.TextLength(ctext)
	runtime.KeepAlive(text)
	__v := (uint32)(__ret)
	return __v
}

// TextSubtext function as declared in ray/raylib.h:1197
func TextSubtext(text string, position int32, length int32) string {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cposition, _ := (C.int)(position), cgoAllocsUnknown
	clength, _ := (C.int)(length), cgoAllocsUnknown
	__ret := C.TextSubtext(ctext, cposition, clength)
	runtime.KeepAlive(text)
	__v := packPCharString(__ret)
	return __v
}

// TextReplace function as declared in ray/raylib.h:1198
func TextReplace(text []byte, replace string, by string) []byte {
	ctext, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&text)).Data)), cgoAllocsUnknown
	replace = safeString(replace)
	creplace, _ := unpackPCharString(replace)
	by = safeString(by)
	cby, _ := unpackPCharString(by)
	__ret := C.TextReplace(ctext, creplace, cby)
	runtime.KeepAlive(by)
	runtime.KeepAlive(replace)
	__v := (*(*[0x7fffffff]byte)(unsafe.Pointer(__ret)))[:0]
	return __v
}

// TextInsert function as declared in ray/raylib.h:1199
func TextInsert(text string, insert string, position int32) []byte {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	insert = safeString(insert)
	cinsert, _ := unpackPCharString(insert)
	cposition, _ := (C.int)(position), cgoAllocsUnknown
	__ret := C.TextInsert(ctext, cinsert, cposition)
	runtime.KeepAlive(insert)
	runtime.KeepAlive(text)
	__v := (*(*[0x7fffffff]byte)(unsafe.Pointer(__ret)))[:0]
	return __v
}

// TextJoin function as declared in ray/raylib.h:1200
func TextJoin(textList []string, count int32, delimiter string) string {
	ctextList, _ := unpackArgSString(textList)
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	delimiter = safeString(delimiter)
	cdelimiter, _ := unpackPCharString(delimiter)
	__ret := C.TextJoin(ctextList, ccount, cdelimiter)
	runtime.KeepAlive(delimiter)
	packSString(textList, ctextList)
	__v := packPCharString(__ret)
	return __v
}

// TextSplit function as declared in ray/raylib.h:1201
func TextSplit(text string, delimiter byte, count []int32) []string {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cdelimiter, _ := (C.char)(delimiter), cgoAllocsUnknown
	ccount, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&count)).Data)), cgoAllocsUnknown
	__ret := C.TextSplit(ctext, cdelimiter, ccount)
	runtime.KeepAlive(text)
	var __v []string
	packSString(__v, __ret)
	return __v
}

// TextAppend function as declared in ray/raylib.h:1202
func TextAppend(text []byte, append string, position []int32) {
	ctext, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&text)).Data)), cgoAllocsUnknown
	append = safeString(append)
	cappend, _ := unpackPCharString(append)
	cposition, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&position)).Data)), cgoAllocsUnknown
	C.TextAppend(ctext, cappend, cposition)
	runtime.KeepAlive(append)
}

// TextFindIndex function as declared in ray/raylib.h:1203
func TextFindIndex(text string, find string) int32 {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	find = safeString(find)
	cfind, _ := unpackPCharString(find)
	__ret := C.TextFindIndex(ctext, cfind)
	runtime.KeepAlive(find)
	runtime.KeepAlive(text)
	__v := (int32)(__ret)
	return __v
}

// TextToUpper function as declared in ray/raylib.h:1204
func TextToUpper(text string) string {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	__ret := C.TextToUpper(ctext)
	runtime.KeepAlive(text)
	__v := packPCharString(__ret)
	return __v
}

// TextToLower function as declared in ray/raylib.h:1205
func TextToLower(text string) string {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	__ret := C.TextToLower(ctext)
	runtime.KeepAlive(text)
	__v := packPCharString(__ret)
	return __v
}

// TextToPascal function as declared in ray/raylib.h:1206
func TextToPascal(text string) string {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	__ret := C.TextToPascal(ctext)
	runtime.KeepAlive(text)
	__v := packPCharString(__ret)
	return __v
}

// TextToInteger function as declared in ray/raylib.h:1207
func TextToInteger(text string) int32 {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	__ret := C.TextToInteger(ctext)
	runtime.KeepAlive(text)
	__v := (int32)(__ret)
	return __v
}

// TextToUtf8 function as declared in ray/raylib.h:1208
func TextToUtf8(codepoints []int32, length int32) []byte {
	ccodepoints, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&codepoints)).Data)), cgoAllocsUnknown
	clength, _ := (C.int)(length), cgoAllocsUnknown
	__ret := C.TextToUtf8(ccodepoints, clength)
	__v := (*(*[0x7fffffff]byte)(unsafe.Pointer(__ret)))[:0]
	return __v
}

// GetCodepoints function as declared in ray/raylib.h:1211
func GetCodepoints(text string, count []int32) []int32 {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	ccount, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&count)).Data)), cgoAllocsUnknown
	__ret := C.GetCodepoints(ctext, ccount)
	runtime.KeepAlive(text)
	__v := (*(*[0x7fffffff]int32)(unsafe.Pointer(__ret)))[:0]
	return __v
}

// GetCodepointsCount function as declared in ray/raylib.h:1212
func GetCodepointsCount(text string) int32 {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	__ret := C.GetCodepointsCount(ctext)
	runtime.KeepAlive(text)
	__v := (int32)(__ret)
	return __v
}

// GetNextCodepoint function as declared in ray/raylib.h:1213
func GetNextCodepoint(text string, bytesProcessed []int32) int32 {
	text = safeString(text)
	ctext, _ := unpackPCharString(text)
	cbytesProcessed, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bytesProcessed)).Data)), cgoAllocsUnknown
	__ret := C.GetNextCodepoint(ctext, cbytesProcessed)
	runtime.KeepAlive(text)
	__v := (int32)(__ret)
	return __v
}

// CodepointToUtf8 function as declared in ray/raylib.h:1214
func CodepointToUtf8(codepoint int32, byteLength []int32) string {
	ccodepoint, _ := (C.int)(codepoint), cgoAllocsUnknown
	cbyteLength, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&byteLength)).Data)), cgoAllocsUnknown
	__ret := C.CodepointToUtf8(ccodepoint, cbyteLength)
	__v := packPCharString(__ret)
	return __v
}

// DrawLine3D function as declared in ray/raylib.h:1221
func DrawLine3D(startPos Vector3, endPos Vector3, color Color) {
	cstartPos, _ := startPos.PassValue()
	cendPos, _ := endPos.PassValue()
	ccolor, _ := color.PassValue()
	C.DrawLine3D(cstartPos, cendPos, ccolor)
}

// DrawCircle3D function as declared in ray/raylib.h:1222
func DrawCircle3D(center Vector3, radius float32, rotationAxis Vector3, rotationAngle float32, color Color) {
	ccenter, _ := center.PassValue()
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	crotationAxis, _ := rotationAxis.PassValue()
	crotationAngle, _ := (C.float)(rotationAngle), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawCircle3D(ccenter, cradius, crotationAxis, crotationAngle, ccolor)
}

// DrawCube function as declared in ray/raylib.h:1223
func DrawCube(position Vector3, width float32, height float32, length float32, color Color) {
	cposition, _ := position.PassValue()
	cwidth, _ := (C.float)(width), cgoAllocsUnknown
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	clength, _ := (C.float)(length), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawCube(cposition, cwidth, cheight, clength, ccolor)
}

// DrawCubeV function as declared in ray/raylib.h:1224
func DrawCubeV(position Vector3, size Vector3, color Color) {
	cposition, _ := position.PassValue()
	csize, _ := size.PassValue()
	ccolor, _ := color.PassValue()
	C.DrawCubeV(cposition, csize, ccolor)
}

// DrawCubeWires function as declared in ray/raylib.h:1225
func DrawCubeWires(position Vector3, width float32, height float32, length float32, color Color) {
	cposition, _ := position.PassValue()
	cwidth, _ := (C.float)(width), cgoAllocsUnknown
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	clength, _ := (C.float)(length), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawCubeWires(cposition, cwidth, cheight, clength, ccolor)
}

// DrawCubeWiresV function as declared in ray/raylib.h:1226
func DrawCubeWiresV(position Vector3, size Vector3, color Color) {
	cposition, _ := position.PassValue()
	csize, _ := size.PassValue()
	ccolor, _ := color.PassValue()
	C.DrawCubeWiresV(cposition, csize, ccolor)
}

// DrawCubeTexture function as declared in ray/raylib.h:1227
func DrawCubeTexture(texture Texture2D, position Vector3, width float32, height float32, length float32, color Color) {
	ctexture, _ := texture.PassValue()
	cposition, _ := position.PassValue()
	cwidth, _ := (C.float)(width), cgoAllocsUnknown
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	clength, _ := (C.float)(length), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawCubeTexture(ctexture, cposition, cwidth, cheight, clength, ccolor)
}

// DrawSphere function as declared in ray/raylib.h:1228
func DrawSphere(centerPos Vector3, radius float32, color Color) {
	ccenterPos, _ := centerPos.PassValue()
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawSphere(ccenterPos, cradius, ccolor)
}

// DrawSphereEx function as declared in ray/raylib.h:1229
func DrawSphereEx(centerPos Vector3, radius float32, rings int32, slices int32, color Color) {
	ccenterPos, _ := centerPos.PassValue()
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	crings, _ := (C.int)(rings), cgoAllocsUnknown
	cslices, _ := (C.int)(slices), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawSphereEx(ccenterPos, cradius, crings, cslices, ccolor)
}

// DrawSphereWires function as declared in ray/raylib.h:1230
func DrawSphereWires(centerPos Vector3, radius float32, rings int32, slices int32, color Color) {
	ccenterPos, _ := centerPos.PassValue()
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	crings, _ := (C.int)(rings), cgoAllocsUnknown
	cslices, _ := (C.int)(slices), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawSphereWires(ccenterPos, cradius, crings, cslices, ccolor)
}

// DrawCylinder function as declared in ray/raylib.h:1231
func DrawCylinder(position Vector3, radiusTop float32, radiusBottom float32, height float32, slices int32, color Color) {
	cposition, _ := position.PassValue()
	cradiusTop, _ := (C.float)(radiusTop), cgoAllocsUnknown
	cradiusBottom, _ := (C.float)(radiusBottom), cgoAllocsUnknown
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	cslices, _ := (C.int)(slices), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawCylinder(cposition, cradiusTop, cradiusBottom, cheight, cslices, ccolor)
}

// DrawCylinderWires function as declared in ray/raylib.h:1232
func DrawCylinderWires(position Vector3, radiusTop float32, radiusBottom float32, height float32, slices int32, color Color) {
	cposition, _ := position.PassValue()
	cradiusTop, _ := (C.float)(radiusTop), cgoAllocsUnknown
	cradiusBottom, _ := (C.float)(radiusBottom), cgoAllocsUnknown
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	cslices, _ := (C.int)(slices), cgoAllocsUnknown
	ccolor, _ := color.PassValue()
	C.DrawCylinderWires(cposition, cradiusTop, cradiusBottom, cheight, cslices, ccolor)
}

// DrawPlane function as declared in ray/raylib.h:1233
func DrawPlane(centerPos Vector3, size Vector2, color Color) {
	ccenterPos, _ := centerPos.PassValue()
	csize, _ := size.PassValue()
	ccolor, _ := color.PassValue()
	C.DrawPlane(ccenterPos, csize, ccolor)
}

// DrawRay function as declared in ray/raylib.h:1234
func DrawRay(ray Ray, color Color) {
	cray, _ := ray.PassValue()
	ccolor, _ := color.PassValue()
	C.DrawRay(cray, ccolor)
}

// DrawGrid function as declared in ray/raylib.h:1235
func DrawGrid(slices int32, spacing float32) {
	cslices, _ := (C.int)(slices), cgoAllocsUnknown
	cspacing, _ := (C.float)(spacing), cgoAllocsUnknown
	C.DrawGrid(cslices, cspacing)
}

// DrawGizmo function as declared in ray/raylib.h:1236
func DrawGizmo(position Vector3) {
	cposition, _ := position.PassValue()
	C.DrawGizmo(cposition)
}

// LoadModel function as declared in ray/raylib.h:1244
func LoadModel(fileName string) Model {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.LoadModel(cfileName)
	runtime.KeepAlive(fileName)
	__v := *NewModelRef(unsafe.Pointer(&__ret))
	return __v
}

// LoadModelFromMesh function as declared in ray/raylib.h:1245
func LoadModelFromMesh(mesh Mesh) Model {
	cmesh, _ := mesh.PassValue()
	__ret := C.LoadModelFromMesh(cmesh)
	__v := *NewModelRef(unsafe.Pointer(&__ret))
	return __v
}

// UnloadModel function as declared in ray/raylib.h:1246
func UnloadModel(model Model) {
	cmodel, _ := model.PassValue()
	C.UnloadModel(cmodel)
}

// LoadMeshes function as declared in ray/raylib.h:1249
func LoadMeshes(fileName string, meshCount []int32) []Mesh {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	cmeshCount, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&meshCount)).Data)), cgoAllocsUnknown
	__ret := C.LoadMeshes(cfileName, cmeshCount)
	runtime.KeepAlive(fileName)
	var __v []Mesh
	packSMesh(__v, __ret)
	return __v
}

// ExportMesh function as declared in ray/raylib.h:1250
func ExportMesh(mesh Mesh, fileName string) {
	cmesh, _ := mesh.PassValue()
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	C.ExportMesh(cmesh, cfileName)
	runtime.KeepAlive(fileName)
}

// UnloadMesh function as declared in ray/raylib.h:1251
func UnloadMesh(mesh Mesh) {
	cmesh, _ := mesh.PassValue()
	C.UnloadMesh(cmesh)
}

// LoadMaterials function as declared in ray/raylib.h:1254
func LoadMaterials(fileName string, materialCount []int32) []Material {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	cmaterialCount, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&materialCount)).Data)), cgoAllocsUnknown
	__ret := C.LoadMaterials(cfileName, cmaterialCount)
	runtime.KeepAlive(fileName)
	var __v []Material
	packSMaterial(__v, __ret)
	return __v
}

// LoadMaterialDefault function as declared in ray/raylib.h:1255
func LoadMaterialDefault() Material {
	__ret := C.LoadMaterialDefault()
	__v := *NewMaterialRef(unsafe.Pointer(&__ret))
	return __v
}

// UnloadMaterial function as declared in ray/raylib.h:1256
func UnloadMaterial(material Material) {
	cmaterial, _ := material.PassValue()
	C.UnloadMaterial(cmaterial)
}

// SetMaterialTexture function as declared in ray/raylib.h:1257
func SetMaterialTexture(material []Material, mapType int32, texture Texture2D) {
	cmaterial, _ := unpackArgSMaterial(material)
	cmapType, _ := (C.int)(mapType), cgoAllocsUnknown
	ctexture, _ := texture.PassValue()
	C.SetMaterialTexture(cmaterial, cmapType, ctexture)
	packSMaterial(material, cmaterial)
}

// SetModelMeshMaterial function as declared in ray/raylib.h:1258
func SetModelMeshMaterial(model []Model, meshId int32, materialId int32) {
	cmodel, _ := unpackArgSModel(model)
	cmeshId, _ := (C.int)(meshId), cgoAllocsUnknown
	cmaterialId, _ := (C.int)(materialId), cgoAllocsUnknown
	C.SetModelMeshMaterial(cmodel, cmeshId, cmaterialId)
	packSModel(model, cmodel)
}

// LoadModelAnimations function as declared in ray/raylib.h:1261
func LoadModelAnimations(fileName string, animsCount []int32) []ModelAnimation {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	canimsCount, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&animsCount)).Data)), cgoAllocsUnknown
	__ret := C.LoadModelAnimations(cfileName, canimsCount)
	runtime.KeepAlive(fileName)
	var __v []ModelAnimation
	packSModelAnimation(__v, __ret)
	return __v
}

// UpdateModelAnimation function as declared in ray/raylib.h:1262
func UpdateModelAnimation(model Model, anim ModelAnimation, frame int32) {
	cmodel, _ := model.PassValue()
	canim, _ := anim.PassValue()
	cframe, _ := (C.int)(frame), cgoAllocsUnknown
	C.UpdateModelAnimation(cmodel, canim, cframe)
}

// UnloadModelAnimation function as declared in ray/raylib.h:1263
func UnloadModelAnimation(anim ModelAnimation) {
	canim, _ := anim.PassValue()
	C.UnloadModelAnimation(canim)
}

// IsModelAnimationValid function as declared in ray/raylib.h:1264
func IsModelAnimationValid(model Model, anim ModelAnimation) bool {
	cmodel, _ := model.PassValue()
	canim, _ := anim.PassValue()
	__ret := C.IsModelAnimationValid(cmodel, canim)
	__v := (bool)(__ret)
	return __v
}

// GenMeshPoly function as declared in ray/raylib.h:1267
func GenMeshPoly(sides int32, radius float32) Mesh {
	csides, _ := (C.int)(sides), cgoAllocsUnknown
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	__ret := C.GenMeshPoly(csides, cradius)
	__v := *NewMeshRef(unsafe.Pointer(&__ret))
	return __v
}

// GenMeshPlane function as declared in ray/raylib.h:1268
func GenMeshPlane(width float32, length float32, resX int32, resZ int32) Mesh {
	cwidth, _ := (C.float)(width), cgoAllocsUnknown
	clength, _ := (C.float)(length), cgoAllocsUnknown
	cresX, _ := (C.int)(resX), cgoAllocsUnknown
	cresZ, _ := (C.int)(resZ), cgoAllocsUnknown
	__ret := C.GenMeshPlane(cwidth, clength, cresX, cresZ)
	__v := *NewMeshRef(unsafe.Pointer(&__ret))
	return __v
}

// GenMeshCube function as declared in ray/raylib.h:1269
func GenMeshCube(width float32, height float32, length float32) Mesh {
	cwidth, _ := (C.float)(width), cgoAllocsUnknown
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	clength, _ := (C.float)(length), cgoAllocsUnknown
	__ret := C.GenMeshCube(cwidth, cheight, clength)
	__v := *NewMeshRef(unsafe.Pointer(&__ret))
	return __v
}

// GenMeshSphere function as declared in ray/raylib.h:1270
func GenMeshSphere(radius float32, rings int32, slices int32) Mesh {
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	crings, _ := (C.int)(rings), cgoAllocsUnknown
	cslices, _ := (C.int)(slices), cgoAllocsUnknown
	__ret := C.GenMeshSphere(cradius, crings, cslices)
	__v := *NewMeshRef(unsafe.Pointer(&__ret))
	return __v
}

// GenMeshHemiSphere function as declared in ray/raylib.h:1271
func GenMeshHemiSphere(radius float32, rings int32, slices int32) Mesh {
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	crings, _ := (C.int)(rings), cgoAllocsUnknown
	cslices, _ := (C.int)(slices), cgoAllocsUnknown
	__ret := C.GenMeshHemiSphere(cradius, crings, cslices)
	__v := *NewMeshRef(unsafe.Pointer(&__ret))
	return __v
}

// GenMeshCylinder function as declared in ray/raylib.h:1272
func GenMeshCylinder(radius float32, height float32, slices int32) Mesh {
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	cheight, _ := (C.float)(height), cgoAllocsUnknown
	cslices, _ := (C.int)(slices), cgoAllocsUnknown
	__ret := C.GenMeshCylinder(cradius, cheight, cslices)
	__v := *NewMeshRef(unsafe.Pointer(&__ret))
	return __v
}

// GenMeshTorus function as declared in ray/raylib.h:1273
func GenMeshTorus(radius float32, size float32, radSeg int32, sides int32) Mesh {
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	csize, _ := (C.float)(size), cgoAllocsUnknown
	cradSeg, _ := (C.int)(radSeg), cgoAllocsUnknown
	csides, _ := (C.int)(sides), cgoAllocsUnknown
	__ret := C.GenMeshTorus(cradius, csize, cradSeg, csides)
	__v := *NewMeshRef(unsafe.Pointer(&__ret))
	return __v
}

// GenMeshKnot function as declared in ray/raylib.h:1274
func GenMeshKnot(radius float32, size float32, radSeg int32, sides int32) Mesh {
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	csize, _ := (C.float)(size), cgoAllocsUnknown
	cradSeg, _ := (C.int)(radSeg), cgoAllocsUnknown
	csides, _ := (C.int)(sides), cgoAllocsUnknown
	__ret := C.GenMeshKnot(cradius, csize, cradSeg, csides)
	__v := *NewMeshRef(unsafe.Pointer(&__ret))
	return __v
}

// GenMeshHeightmap function as declared in ray/raylib.h:1275
func GenMeshHeightmap(heightmap Image, size Vector3) Mesh {
	cheightmap, _ := heightmap.PassValue()
	csize, _ := size.PassValue()
	__ret := C.GenMeshHeightmap(cheightmap, csize)
	__v := *NewMeshRef(unsafe.Pointer(&__ret))
	return __v
}

// GenMeshCubicmap function as declared in ray/raylib.h:1276
func GenMeshCubicmap(cubicmap Image, cubeSize Vector3) Mesh {
	ccubicmap, _ := cubicmap.PassValue()
	ccubeSize, _ := cubeSize.PassValue()
	__ret := C.GenMeshCubicmap(ccubicmap, ccubeSize)
	__v := *NewMeshRef(unsafe.Pointer(&__ret))
	return __v
}

// MeshBoundingBox function as declared in ray/raylib.h:1279
func MeshBoundingBox(mesh Mesh) BoundingBox {
	cmesh, _ := mesh.PassValue()
	__ret := C.MeshBoundingBox(cmesh)
	__v := *NewBoundingBoxRef(unsafe.Pointer(&__ret))
	return __v
}

// MeshTangents function as declared in ray/raylib.h:1280
func MeshTangents(mesh []Mesh) {
	cmesh, _ := unpackArgSMesh(mesh)
	C.MeshTangents(cmesh)
	packSMesh(mesh, cmesh)
}

// MeshBinormals function as declared in ray/raylib.h:1281
func MeshBinormals(mesh []Mesh) {
	cmesh, _ := unpackArgSMesh(mesh)
	C.MeshBinormals(cmesh)
	packSMesh(mesh, cmesh)
}

// DrawModel function as declared in ray/raylib.h:1284
func DrawModel(model Model, position Vector3, scale float32, tint Color) {
	cmodel, _ := model.PassValue()
	cposition, _ := position.PassValue()
	cscale, _ := (C.float)(scale), cgoAllocsUnknown
	ctint, _ := tint.PassValue()
	C.DrawModel(cmodel, cposition, cscale, ctint)
}

// DrawModelEx function as declared in ray/raylib.h:1285
func DrawModelEx(model Model, position Vector3, rotationAxis Vector3, rotationAngle float32, scale Vector3, tint Color) {
	cmodel, _ := model.PassValue()
	cposition, _ := position.PassValue()
	crotationAxis, _ := rotationAxis.PassValue()
	crotationAngle, _ := (C.float)(rotationAngle), cgoAllocsUnknown
	cscale, _ := scale.PassValue()
	ctint, _ := tint.PassValue()
	C.DrawModelEx(cmodel, cposition, crotationAxis, crotationAngle, cscale, ctint)
}

// DrawModelWires function as declared in ray/raylib.h:1286
func DrawModelWires(model Model, position Vector3, scale float32, tint Color) {
	cmodel, _ := model.PassValue()
	cposition, _ := position.PassValue()
	cscale, _ := (C.float)(scale), cgoAllocsUnknown
	ctint, _ := tint.PassValue()
	C.DrawModelWires(cmodel, cposition, cscale, ctint)
}

// DrawModelWiresEx function as declared in ray/raylib.h:1287
func DrawModelWiresEx(model Model, position Vector3, rotationAxis Vector3, rotationAngle float32, scale Vector3, tint Color) {
	cmodel, _ := model.PassValue()
	cposition, _ := position.PassValue()
	crotationAxis, _ := rotationAxis.PassValue()
	crotationAngle, _ := (C.float)(rotationAngle), cgoAllocsUnknown
	cscale, _ := scale.PassValue()
	ctint, _ := tint.PassValue()
	C.DrawModelWiresEx(cmodel, cposition, crotationAxis, crotationAngle, cscale, ctint)
}

// DrawBoundingBox function as declared in ray/raylib.h:1288
func DrawBoundingBox(box BoundingBox, color Color) {
	cbox, _ := box.PassValue()
	ccolor, _ := color.PassValue()
	C.DrawBoundingBox(cbox, ccolor)
}

// DrawBillboard function as declared in ray/raylib.h:1289
func DrawBillboard(camera Camera, texture Texture2D, center Vector3, size float32, tint Color) {
	ccamera, _ := camera.PassValue()
	ctexture, _ := texture.PassValue()
	ccenter, _ := center.PassValue()
	csize, _ := (C.float)(size), cgoAllocsUnknown
	ctint, _ := tint.PassValue()
	C.DrawBillboard(ccamera, ctexture, ccenter, csize, ctint)
}

// DrawBillboardRec function as declared in ray/raylib.h:1290
func DrawBillboardRec(camera Camera, texture Texture2D, sourceRec Rectangle, center Vector3, size float32, tint Color) {
	ccamera, _ := camera.PassValue()
	ctexture, _ := texture.PassValue()
	csourceRec, _ := sourceRec.PassValue()
	ccenter, _ := center.PassValue()
	csize, _ := (C.float)(size), cgoAllocsUnknown
	ctint, _ := tint.PassValue()
	C.DrawBillboardRec(ccamera, ctexture, csourceRec, ccenter, csize, ctint)
}

// CheckCollisionSpheres function as declared in ray/raylib.h:1293
func CheckCollisionSpheres(centerA Vector3, radiusA float32, centerB Vector3, radiusB float32) bool {
	ccenterA, _ := centerA.PassValue()
	cradiusA, _ := (C.float)(radiusA), cgoAllocsUnknown
	ccenterB, _ := centerB.PassValue()
	cradiusB, _ := (C.float)(radiusB), cgoAllocsUnknown
	__ret := C.CheckCollisionSpheres(ccenterA, cradiusA, ccenterB, cradiusB)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionBoxes function as declared in ray/raylib.h:1294
func CheckCollisionBoxes(box1 BoundingBox, box2 BoundingBox) bool {
	cbox1, _ := box1.PassValue()
	cbox2, _ := box2.PassValue()
	__ret := C.CheckCollisionBoxes(cbox1, cbox2)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionBoxSphere function as declared in ray/raylib.h:1295
func CheckCollisionBoxSphere(box BoundingBox, center Vector3, radius float32) bool {
	cbox, _ := box.PassValue()
	ccenter, _ := center.PassValue()
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	__ret := C.CheckCollisionBoxSphere(cbox, ccenter, cradius)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionRaySphere function as declared in ray/raylib.h:1296
func CheckCollisionRaySphere(ray Ray, center Vector3, radius float32) bool {
	cray, _ := ray.PassValue()
	ccenter, _ := center.PassValue()
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	__ret := C.CheckCollisionRaySphere(cray, ccenter, cradius)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionRaySphereEx function as declared in ray/raylib.h:1297
func CheckCollisionRaySphereEx(ray Ray, center Vector3, radius float32, collisionPoint []Vector3) bool {
	cray, _ := ray.PassValue()
	ccenter, _ := center.PassValue()
	cradius, _ := (C.float)(radius), cgoAllocsUnknown
	ccollisionPoint, _ := unpackArgSVector3(collisionPoint)
	__ret := C.CheckCollisionRaySphereEx(cray, ccenter, cradius, ccollisionPoint)
	packSVector3(collisionPoint, ccollisionPoint)
	__v := (bool)(__ret)
	return __v
}

// CheckCollisionRayBox function as declared in ray/raylib.h:1298
func CheckCollisionRayBox(ray Ray, box BoundingBox) bool {
	cray, _ := ray.PassValue()
	cbox, _ := box.PassValue()
	__ret := C.CheckCollisionRayBox(cray, cbox)
	__v := (bool)(__ret)
	return __v
}

// GetCollisionRayModel function as declared in ray/raylib.h:1299
func GetCollisionRayModel(ray Ray, model Model) RayHitInfo {
	cray, _ := ray.PassValue()
	cmodel, _ := model.PassValue()
	__ret := C.GetCollisionRayModel(cray, cmodel)
	__v := *NewRayHitInfoRef(unsafe.Pointer(&__ret))
	return __v
}

// GetCollisionRayTriangle function as declared in ray/raylib.h:1300
func GetCollisionRayTriangle(ray Ray, p1 Vector3, p2 Vector3, p3 Vector3) RayHitInfo {
	cray, _ := ray.PassValue()
	cp1, _ := p1.PassValue()
	cp2, _ := p2.PassValue()
	cp3, _ := p3.PassValue()
	__ret := C.GetCollisionRayTriangle(cray, cp1, cp2, cp3)
	__v := *NewRayHitInfoRef(unsafe.Pointer(&__ret))
	return __v
}

// GetCollisionRayGround function as declared in ray/raylib.h:1301
func GetCollisionRayGround(ray Ray, groundHeight float32) RayHitInfo {
	cray, _ := ray.PassValue()
	cgroundHeight, _ := (C.float)(groundHeight), cgoAllocsUnknown
	__ret := C.GetCollisionRayGround(cray, cgroundHeight)
	__v := *NewRayHitInfoRef(unsafe.Pointer(&__ret))
	return __v
}

// LoadText function as declared in ray/raylib.h:1309
func LoadText(fileName string) []byte {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.LoadText(cfileName)
	runtime.KeepAlive(fileName)
	__v := (*(*[0x7fffffff]byte)(unsafe.Pointer(__ret)))[:0]
	return __v
}

// LoadShader function as declared in ray/raylib.h:1310
func LoadShader(vsFileName string, fsFileName string) Shader {
	vsFileName = safeString(vsFileName)
	cvsFileName, _ := unpackPCharString(vsFileName)
	fsFileName = safeString(fsFileName)
	cfsFileName, _ := unpackPCharString(fsFileName)
	__ret := C.LoadShader(cvsFileName, cfsFileName)
	runtime.KeepAlive(fsFileName)
	runtime.KeepAlive(vsFileName)
	__v := *NewShaderRef(unsafe.Pointer(&__ret))
	return __v
}

// LoadShaderCode function as declared in ray/raylib.h:1311
func LoadShaderCode(vsCode string, fsCode string) Shader {
	vsCode = safeString(vsCode)
	cvsCode, _ := unpackPCharString(vsCode)
	fsCode = safeString(fsCode)
	cfsCode, _ := unpackPCharString(fsCode)
	__ret := C.LoadShaderCode(cvsCode, cfsCode)
	runtime.KeepAlive(fsCode)
	runtime.KeepAlive(vsCode)
	__v := *NewShaderRef(unsafe.Pointer(&__ret))
	return __v
}

// UnloadShader function as declared in ray/raylib.h:1312
func UnloadShader(shader Shader) {
	cshader, _ := shader.PassValue()
	C.UnloadShader(cshader)
}

// GetShaderDefault function as declared in ray/raylib.h:1314
func GetShaderDefault() Shader {
	__ret := C.GetShaderDefault()
	__v := *NewShaderRef(unsafe.Pointer(&__ret))
	return __v
}

// GetTextureDefault function as declared in ray/raylib.h:1315
func GetTextureDefault() Texture2D {
	__ret := C.GetTextureDefault()
	__v := *NewTexture2DRef(unsafe.Pointer(&__ret))
	return __v
}

// GetShaderLocation function as declared in ray/raylib.h:1318
func GetShaderLocation(shader Shader, uniformName string) int32 {
	cshader, _ := shader.PassValue()
	uniformName = safeString(uniformName)
	cuniformName, _ := unpackPCharString(uniformName)
	__ret := C.GetShaderLocation(cshader, cuniformName)
	runtime.KeepAlive(uniformName)
	__v := (int32)(__ret)
	return __v
}

// SetShaderValue function as declared in ray/raylib.h:1319
func SetShaderValue(shader Shader, uniformLoc int32, value unsafe.Pointer, uniformType int32) {
	cshader, _ := shader.PassValue()
	cuniformLoc, _ := (C.int)(uniformLoc), cgoAllocsUnknown
	cvalue, _ := value, cgoAllocsUnknown
	cuniformType, _ := (C.int)(uniformType), cgoAllocsUnknown
	C.SetShaderValue(cshader, cuniformLoc, cvalue, cuniformType)
}

// SetShaderValueV function as declared in ray/raylib.h:1320
func SetShaderValueV(shader Shader, uniformLoc int32, value unsafe.Pointer, uniformType int32, count int32) {
	cshader, _ := shader.PassValue()
	cuniformLoc, _ := (C.int)(uniformLoc), cgoAllocsUnknown
	cvalue, _ := value, cgoAllocsUnknown
	cuniformType, _ := (C.int)(uniformType), cgoAllocsUnknown
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	C.SetShaderValueV(cshader, cuniformLoc, cvalue, cuniformType, ccount)
}

// SetShaderValueMatrix function as declared in ray/raylib.h:1321
func SetShaderValueMatrix(shader Shader, uniformLoc int32, mat Matrix) {
	cshader, _ := shader.PassValue()
	cuniformLoc, _ := (C.int)(uniformLoc), cgoAllocsUnknown
	cmat, _ := mat.PassValue()
	C.SetShaderValueMatrix(cshader, cuniformLoc, cmat)
}

// SetShaderValueTexture function as declared in ray/raylib.h:1322
func SetShaderValueTexture(shader Shader, uniformLoc int32, texture Texture2D) {
	cshader, _ := shader.PassValue()
	cuniformLoc, _ := (C.int)(uniformLoc), cgoAllocsUnknown
	ctexture, _ := texture.PassValue()
	C.SetShaderValueTexture(cshader, cuniformLoc, ctexture)
}

// SetMatrixProjection function as declared in ray/raylib.h:1323
func SetMatrixProjection(proj Matrix) {
	cproj, _ := proj.PassValue()
	C.SetMatrixProjection(cproj)
}

// SetMatrixModelview function as declared in ray/raylib.h:1324
func SetMatrixModelview(view Matrix) {
	cview, _ := view.PassValue()
	C.SetMatrixModelview(cview)
}

// GetMatrixModelview function as declared in ray/raylib.h:1325
func GetMatrixModelview() Matrix {
	__ret := C.GetMatrixModelview()
	__v := *NewMatrixRef(unsafe.Pointer(&__ret))
	return __v
}

// GetMatrixProjection function as declared in ray/raylib.h:1326
func GetMatrixProjection() Matrix {
	__ret := C.GetMatrixProjection()
	__v := *NewMatrixRef(unsafe.Pointer(&__ret))
	return __v
}

// GenTextureCubemap function as declared in ray/raylib.h:1330
func GenTextureCubemap(shader Shader, skyHDR Texture2D, size int32) Texture2D {
	cshader, _ := shader.PassValue()
	cskyHDR, _ := skyHDR.PassValue()
	csize, _ := (C.int)(size), cgoAllocsUnknown
	__ret := C.GenTextureCubemap(cshader, cskyHDR, csize)
	__v := *NewTexture2DRef(unsafe.Pointer(&__ret))
	return __v
}

// GenTextureIrradiance function as declared in ray/raylib.h:1331
func GenTextureIrradiance(shader Shader, cubemap Texture2D, size int32) Texture2D {
	cshader, _ := shader.PassValue()
	ccubemap, _ := cubemap.PassValue()
	csize, _ := (C.int)(size), cgoAllocsUnknown
	__ret := C.GenTextureIrradiance(cshader, ccubemap, csize)
	__v := *NewTexture2DRef(unsafe.Pointer(&__ret))
	return __v
}

// GenTexturePrefilter function as declared in ray/raylib.h:1332
func GenTexturePrefilter(shader Shader, cubemap Texture2D, size int32) Texture2D {
	cshader, _ := shader.PassValue()
	ccubemap, _ := cubemap.PassValue()
	csize, _ := (C.int)(size), cgoAllocsUnknown
	__ret := C.GenTexturePrefilter(cshader, ccubemap, csize)
	__v := *NewTexture2DRef(unsafe.Pointer(&__ret))
	return __v
}

// GenTextureBRDF function as declared in ray/raylib.h:1333
func GenTextureBRDF(shader Shader, size int32) Texture2D {
	cshader, _ := shader.PassValue()
	csize, _ := (C.int)(size), cgoAllocsUnknown
	__ret := C.GenTextureBRDF(cshader, csize)
	__v := *NewTexture2DRef(unsafe.Pointer(&__ret))
	return __v
}

// BeginShaderMode function as declared in ray/raylib.h:1336
func BeginShaderMode(shader Shader) {
	cshader, _ := shader.PassValue()
	C.BeginShaderMode(cshader)
}

// EndShaderMode function as declared in ray/raylib.h:1337
func EndShaderMode() {
	C.EndShaderMode()
}

// BeginBlendMode function as declared in ray/raylib.h:1338
func BeginBlendMode(mode int32) {
	cmode, _ := (C.int)(mode), cgoAllocsUnknown
	C.BeginBlendMode(cmode)
}

// EndBlendMode function as declared in ray/raylib.h:1339
func EndBlendMode() {
	C.EndBlendMode()
}

// InitVrSimulator function as declared in ray/raylib.h:1342
func InitVrSimulator() {
	C.InitVrSimulator()
}

// CloseVrSimulator function as declared in ray/raylib.h:1343
func CloseVrSimulator() {
	C.CloseVrSimulator()
}

// UpdateVrTracking function as declared in ray/raylib.h:1344
func UpdateVrTracking(camera []Camera) {
	ccamera, _ := unpackArgSCamera(camera)
	C.UpdateVrTracking(ccamera)
	packSCamera(camera, ccamera)
}

// SetVrConfiguration function as declared in ray/raylib.h:1345
func SetVrConfiguration(info VrDeviceInfo, distortion Shader) {
	cinfo, _ := info.PassValue()
	cdistortion, _ := distortion.PassValue()
	C.SetVrConfiguration(cinfo, cdistortion)
}

// IsVrSimulatorReady function as declared in ray/raylib.h:1346
func IsVrSimulatorReady() bool {
	__ret := C.IsVrSimulatorReady()
	__v := (bool)(__ret)
	return __v
}

// ToggleVrMode function as declared in ray/raylib.h:1347
func ToggleVrMode() {
	C.ToggleVrMode()
}

// BeginVrDrawing function as declared in ray/raylib.h:1348
func BeginVrDrawing() {
	C.BeginVrDrawing()
}

// EndVrDrawing function as declared in ray/raylib.h:1349
func EndVrDrawing() {
	C.EndVrDrawing()
}

// InitAudioDevice function as declared in ray/raylib.h:1356
func InitAudioDevice() {
	C.InitAudioDevice()
}

// CloseAudioDevice function as declared in ray/raylib.h:1357
func CloseAudioDevice() {
	C.CloseAudioDevice()
}

// IsAudioDeviceReady function as declared in ray/raylib.h:1358
func IsAudioDeviceReady() bool {
	__ret := C.IsAudioDeviceReady()
	__v := (bool)(__ret)
	return __v
}

// SetMasterVolume function as declared in ray/raylib.h:1359
func SetMasterVolume(volume float32) {
	cvolume, _ := (C.float)(volume), cgoAllocsUnknown
	C.SetMasterVolume(cvolume)
}

// LoadWave function as declared in ray/raylib.h:1362
func LoadWave(fileName string) Wave {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.LoadWave(cfileName)
	runtime.KeepAlive(fileName)
	__v := *NewWaveRef(unsafe.Pointer(&__ret))
	return __v
}

// LoadSound function as declared in ray/raylib.h:1363
func LoadSound(fileName string) Sound {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.LoadSound(cfileName)
	runtime.KeepAlive(fileName)
	__v := *NewSoundRef(unsafe.Pointer(&__ret))
	return __v
}

// LoadSoundFromWave function as declared in ray/raylib.h:1364
func LoadSoundFromWave(wave Wave) Sound {
	cwave, _ := wave.PassValue()
	__ret := C.LoadSoundFromWave(cwave)
	__v := *NewSoundRef(unsafe.Pointer(&__ret))
	return __v
}

// UpdateSound function as declared in ray/raylib.h:1365
func UpdateSound(sound Sound, data unsafe.Pointer, samplesCount int32) {
	csound, _ := sound.PassValue()
	cdata, _ := data, cgoAllocsUnknown
	csamplesCount, _ := (C.int)(samplesCount), cgoAllocsUnknown
	C.UpdateSound(csound, cdata, csamplesCount)
}

// UnloadWave function as declared in ray/raylib.h:1366
func UnloadWave(wave Wave) {
	cwave, _ := wave.PassValue()
	C.UnloadWave(cwave)
}

// UnloadSound function as declared in ray/raylib.h:1367
func UnloadSound(sound Sound) {
	csound, _ := sound.PassValue()
	C.UnloadSound(csound)
}

// ExportWave function as declared in ray/raylib.h:1368
func ExportWave(wave Wave, fileName string) {
	cwave, _ := wave.PassValue()
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	C.ExportWave(cwave, cfileName)
	runtime.KeepAlive(fileName)
}

// ExportWaveAsCode function as declared in ray/raylib.h:1369
func ExportWaveAsCode(wave Wave, fileName string) {
	cwave, _ := wave.PassValue()
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	C.ExportWaveAsCode(cwave, cfileName)
	runtime.KeepAlive(fileName)
}

// PlaySound function as declared in ray/raylib.h:1372
func PlaySound(sound Sound) {
	csound, _ := sound.PassValue()
	C.PlaySound(csound)
}

// StopSound function as declared in ray/raylib.h:1373
func StopSound(sound Sound) {
	csound, _ := sound.PassValue()
	C.StopSound(csound)
}

// PauseSound function as declared in ray/raylib.h:1374
func PauseSound(sound Sound) {
	csound, _ := sound.PassValue()
	C.PauseSound(csound)
}

// ResumeSound function as declared in ray/raylib.h:1375
func ResumeSound(sound Sound) {
	csound, _ := sound.PassValue()
	C.ResumeSound(csound)
}

// PlaySoundMulti function as declared in ray/raylib.h:1376
func PlaySoundMulti(sound Sound) {
	csound, _ := sound.PassValue()
	C.PlaySoundMulti(csound)
}

// StopSoundMulti function as declared in ray/raylib.h:1377
func StopSoundMulti() {
	C.StopSoundMulti()
}

// GetSoundsPlaying function as declared in ray/raylib.h:1378
func GetSoundsPlaying() int32 {
	__ret := C.GetSoundsPlaying()
	__v := (int32)(__ret)
	return __v
}

// IsSoundPlaying function as declared in ray/raylib.h:1379
func IsSoundPlaying(sound Sound) bool {
	csound, _ := sound.PassValue()
	__ret := C.IsSoundPlaying(csound)
	__v := (bool)(__ret)
	return __v
}

// SetSoundVolume function as declared in ray/raylib.h:1380
func SetSoundVolume(sound Sound, volume float32) {
	csound, _ := sound.PassValue()
	cvolume, _ := (C.float)(volume), cgoAllocsUnknown
	C.SetSoundVolume(csound, cvolume)
}

// SetSoundPitch function as declared in ray/raylib.h:1381
func SetSoundPitch(sound Sound, pitch float32) {
	csound, _ := sound.PassValue()
	cpitch, _ := (C.float)(pitch), cgoAllocsUnknown
	C.SetSoundPitch(csound, cpitch)
}

// WaveFormat function as declared in ray/raylib.h:1382
func WaveFormat(wave []Wave, sampleRate int32, sampleSize int32, channels int32) {
	cwave, _ := unpackArgSWave(wave)
	csampleRate, _ := (C.int)(sampleRate), cgoAllocsUnknown
	csampleSize, _ := (C.int)(sampleSize), cgoAllocsUnknown
	cchannels, _ := (C.int)(channels), cgoAllocsUnknown
	C.WaveFormat(cwave, csampleRate, csampleSize, cchannels)
	packSWave(wave, cwave)
}

// WaveCopy function as declared in ray/raylib.h:1383
func WaveCopy(wave Wave) Wave {
	cwave, _ := wave.PassValue()
	__ret := C.WaveCopy(cwave)
	__v := *NewWaveRef(unsafe.Pointer(&__ret))
	return __v
}

// WaveCrop function as declared in ray/raylib.h:1384
func WaveCrop(wave []Wave, initSample int32, finalSample int32) {
	cwave, _ := unpackArgSWave(wave)
	cinitSample, _ := (C.int)(initSample), cgoAllocsUnknown
	cfinalSample, _ := (C.int)(finalSample), cgoAllocsUnknown
	C.WaveCrop(cwave, cinitSample, cfinalSample)
	packSWave(wave, cwave)
}

// GetWaveData function as declared in ray/raylib.h:1385
func GetWaveData(wave Wave) []float32 {
	cwave, _ := wave.PassValue()
	__ret := C.GetWaveData(cwave)
	__v := (*(*[0x7fffffff]float32)(unsafe.Pointer(__ret)))[:0]
	return __v
}

// LoadMusicStream function as declared in ray/raylib.h:1388
func LoadMusicStream(fileName string) Music {
	fileName = safeString(fileName)
	cfileName, _ := unpackPCharString(fileName)
	__ret := C.LoadMusicStream(cfileName)
	runtime.KeepAlive(fileName)
	__v := *NewMusicRef(unsafe.Pointer(&__ret))
	return __v
}

// UnloadMusicStream function as declared in ray/raylib.h:1389
func UnloadMusicStream(music Music) {
	cmusic, _ := music.PassValue()
	C.UnloadMusicStream(cmusic)
}

// PlayMusicStream function as declared in ray/raylib.h:1390
func PlayMusicStream(music Music) {
	cmusic, _ := music.PassValue()
	C.PlayMusicStream(cmusic)
}

// UpdateMusicStream function as declared in ray/raylib.h:1391
func UpdateMusicStream(music Music) {
	cmusic, _ := music.PassValue()
	C.UpdateMusicStream(cmusic)
}

// StopMusicStream function as declared in ray/raylib.h:1392
func StopMusicStream(music Music) {
	cmusic, _ := music.PassValue()
	C.StopMusicStream(cmusic)
}

// PauseMusicStream function as declared in ray/raylib.h:1393
func PauseMusicStream(music Music) {
	cmusic, _ := music.PassValue()
	C.PauseMusicStream(cmusic)
}

// ResumeMusicStream function as declared in ray/raylib.h:1394
func ResumeMusicStream(music Music) {
	cmusic, _ := music.PassValue()
	C.ResumeMusicStream(cmusic)
}

// IsMusicPlaying function as declared in ray/raylib.h:1395
func IsMusicPlaying(music Music) bool {
	cmusic, _ := music.PassValue()
	__ret := C.IsMusicPlaying(cmusic)
	__v := (bool)(__ret)
	return __v
}

// SetMusicVolume function as declared in ray/raylib.h:1396
func SetMusicVolume(music Music, volume float32) {
	cmusic, _ := music.PassValue()
	cvolume, _ := (C.float)(volume), cgoAllocsUnknown
	C.SetMusicVolume(cmusic, cvolume)
}

// SetMusicPitch function as declared in ray/raylib.h:1397
func SetMusicPitch(music Music, pitch float32) {
	cmusic, _ := music.PassValue()
	cpitch, _ := (C.float)(pitch), cgoAllocsUnknown
	C.SetMusicPitch(cmusic, cpitch)
}

// SetMusicLoopCount function as declared in ray/raylib.h:1398
func SetMusicLoopCount(music Music, count int32) {
	cmusic, _ := music.PassValue()
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	C.SetMusicLoopCount(cmusic, ccount)
}

// GetMusicTimeLength function as declared in ray/raylib.h:1399
func GetMusicTimeLength(music Music) float32 {
	cmusic, _ := music.PassValue()
	__ret := C.GetMusicTimeLength(cmusic)
	__v := (float32)(__ret)
	return __v
}

// GetMusicTimePlayed function as declared in ray/raylib.h:1400
func GetMusicTimePlayed(music Music) float32 {
	cmusic, _ := music.PassValue()
	__ret := C.GetMusicTimePlayed(cmusic)
	__v := (float32)(__ret)
	return __v
}

// InitAudioStream function as declared in ray/raylib.h:1403
func InitAudioStream(sampleRate uint32, sampleSize uint32, channels uint32) AudioStream {
	csampleRate, _ := (C.uint)(sampleRate), cgoAllocsUnknown
	csampleSize, _ := (C.uint)(sampleSize), cgoAllocsUnknown
	cchannels, _ := (C.uint)(channels), cgoAllocsUnknown
	__ret := C.InitAudioStream(csampleRate, csampleSize, cchannels)
	__v := *NewAudioStreamRef(unsafe.Pointer(&__ret))
	return __v
}

// UpdateAudioStream function as declared in ray/raylib.h:1404
func UpdateAudioStream(stream AudioStream, data unsafe.Pointer, samplesCount int32) {
	cstream, _ := stream.PassValue()
	cdata, _ := data, cgoAllocsUnknown
	csamplesCount, _ := (C.int)(samplesCount), cgoAllocsUnknown
	C.UpdateAudioStream(cstream, cdata, csamplesCount)
}

// CloseAudioStream function as declared in ray/raylib.h:1405
func CloseAudioStream(stream AudioStream) {
	cstream, _ := stream.PassValue()
	C.CloseAudioStream(cstream)
}

// IsAudioStreamProcessed function as declared in ray/raylib.h:1406
func IsAudioStreamProcessed(stream AudioStream) bool {
	cstream, _ := stream.PassValue()
	__ret := C.IsAudioStreamProcessed(cstream)
	__v := (bool)(__ret)
	return __v
}

// PlayAudioStream function as declared in ray/raylib.h:1407
func PlayAudioStream(stream AudioStream) {
	cstream, _ := stream.PassValue()
	C.PlayAudioStream(cstream)
}

// PauseAudioStream function as declared in ray/raylib.h:1408
func PauseAudioStream(stream AudioStream) {
	cstream, _ := stream.PassValue()
	C.PauseAudioStream(cstream)
}

// ResumeAudioStream function as declared in ray/raylib.h:1409
func ResumeAudioStream(stream AudioStream) {
	cstream, _ := stream.PassValue()
	C.ResumeAudioStream(cstream)
}

// IsAudioStreamPlaying function as declared in ray/raylib.h:1410
func IsAudioStreamPlaying(stream AudioStream) bool {
	cstream, _ := stream.PassValue()
	__ret := C.IsAudioStreamPlaying(cstream)
	__v := (bool)(__ret)
	return __v
}

// StopAudioStream function as declared in ray/raylib.h:1411
func StopAudioStream(stream AudioStream) {
	cstream, _ := stream.PassValue()
	C.StopAudioStream(cstream)
}

// SetAudioStreamVolume function as declared in ray/raylib.h:1412
func SetAudioStreamVolume(stream AudioStream, volume float32) {
	cstream, _ := stream.PassValue()
	cvolume, _ := (C.float)(volume), cgoAllocsUnknown
	C.SetAudioStreamVolume(cstream, cvolume)
}

// SetAudioStreamPitch function as declared in ray/raylib.h:1413
func SetAudioStreamPitch(stream AudioStream, pitch float32) {
	cstream, _ := stream.PassValue()
	cpitch, _ := (C.float)(pitch), cgoAllocsUnknown
	C.SetAudioStreamPitch(cstream, cpitch)
}
